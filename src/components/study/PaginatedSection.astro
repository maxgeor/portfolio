---
import Grid from '../Grid.astro';
import Image from "./Image.astro";
import Video from "./Video.astro";

export interface Props {
  sections: {
    id: string;
    title: string;
    details: string[];
    media: {
      type: "image" | "video";
      src: string;
      alt: string;
    }
  }[];
  classes?: string;
}

const { sections, classes = "" } = Astro.props;
---

<div class={`paginated-section flex flex-col gap-3 ${classes}`}>
  {sections.map((section, index) => {
    return section.media.type === 'video' ? (
      <Video
        id={section.id}
        src={section.media.src}
        alt={section.media.alt}
        span={12}
        classes={`
          section-media section-media-${index}
          ${index > 0 ? 'hidden' : ''}
        `}
      />
    ) : (
      <Image 
        id={section.id}
        src={section.media.src}
        alt={section.media.alt}
        span={12}
        classes={`
          section-media section-media-${index}
          ${index > 0 ? 'hidden' : ''}
        `}
      />
    )
  })}
  <div 
    class="section-titles flex flex-col col-span-full " 
    style="text-wrap: pretty;"
  >
    {sections.map((section, index) => (
      <button 
        data-index={index} 
        class={`
          group section-title section-title-${index} 
          w-fit px-[3px] -mx-[3px]  focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-green
          ${index === 0 ? 'active' : ''}
        `}
      >
        <div class="!text-black flex gap-3 text-left group-hover:text-black group-focus-visible:text-black">
          <span>{section.id}</span>
          <p class="">{section.title}</p>
        </div>
      </button>
    ))}
  </div>
  {sections.map((section, index) => (
    <p class={`
      section-detail section-detail-${index} break-words hyphens-auto -mt-0.5 max-w-[80ch]
      normal-case col-span-full  flex flex-col gap-y-3
      ${index > 0 ? 'hidden' : ''}
    `}>
      {section.details}
    </p>
  ))}
</Grid>

<style>
  .section-titles > * > div {
    color: #fff;
    opacity: 40%;
  }
  .section-titles > *:hover > div {
    opacity: 100%;
  }
  .section-titles > .active > div {
   opacity: 100%;
  }
</style>

<script>
  const paginatedSections: NodeListOf<HTMLElement> = 
    document.querySelectorAll(".paginated-section");

  const switchSection = (
    titles: NodeListOf<HTMLElement>,
    medias: NodeListOf<HTMLElement>,
    details: NodeListOf<HTMLElement>,
    index: number
  ) => {

    [...medias].forEach(media => {
      media.classList.contains(`section-media-${index}`)
        ? media.classList.remove('hidden')
        : media.classList.add('hidden');
    });

    [...details].forEach(detail => {
      detail.classList.contains(`section-detail-${index}`)
        ? detail.classList.remove('hidden')
        : detail.classList.add('hidden');
    });

    [...titles].forEach(title => {
      title.classList.contains(`section-title-${index}`)
        ? title.classList.add('active')
        : title.classList.remove('active');
    });
  }

  paginatedSections?.forEach((paginatedSection) => {
    const medias: NodeListOf<HTMLButtonElement> = 
      paginatedSection.querySelectorAll('.section-media');
    const details: NodeListOf<HTMLButtonElement> = 
      paginatedSection.querySelectorAll('.section-detail');
    const titles: NodeListOf<HTMLButtonElement> = 
      paginatedSection.querySelectorAll(".section-title");

    titles.forEach(title => title.addEventListener('click', () => {
      const index = parseInt(title.dataset?.index || '0');
      switchSection(titles, medias, details, index);
    }));
    
    titles.forEach(title => title.addEventListener('onmouseenter', (e) => {
      const index = parseInt(title.dataset?.index || '0');
      switchSection(titles, medias, details, index);
    }));
  });
</script>

---
import PauseIcon from "../icons/PauseIcon.astro";
import { stripExtension } from "../../utils/formatting";

export interface Props {
  src: string;
  alt: string;
  id: string;
  span: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  hasPadding?: boolean;
  hasBorder?: boolean;
  orientation?: 'vertical' | 'horizontal';
  classes?: string;
}

const {
  src, 
  alt,
  id,
  span = 12,
  hasPadding = false,
  hasBorder = false,
  orientation = 'horizontal',
  classes = "" 
} = Astro.props;

const extensionlessSrc = stripExtension(src);

let colClasses = '';
let spanClasses = '';

switch (typeof span) {
  case 'number':
    colClasses = `grid-cols-${span}`;
    spanClasses = `col-span-${span}`;
    break;
  case 'object':
    for (const [breakpoint, cols] of Object.entries(span)) {
      if (breakpoint === 'base') {
        colClasses += `grid-cols-${cols} `;
        spanClasses += `col-span-${cols} `;
      } else {
        colClasses += `${breakpoint}:grid-cols-${cols} `;
        spanClasses += `${breakpoint}:col-span-${cols} `;
      }
    }
    break;
}
---
<div
  id={id}
  class={`grid gap-x-4 ${colClasses} ${spanClasses} ${classes}`}
>
  <div class="flex gap-4 col-span-full">
    <p>{id}</p>
    <p>{alt}</p>
  </div>
  <div class={`
    relative grid col-span-full gap-x-4 overflow-visible rounded 
    ${colClasses}
    ${hasPadding ? '-mx-4 px-4 xs:mx-0 xs:px-0' : ''}
    ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
  `}>
    <video
      class={`
        rounded  bg-[#f5f6f8] transition duration-[250ms] ease-out object-cover w-full cursor-pointer select-none self-center hover:brightness-[95%] focus:brightness-[95%]
        ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
        ${hasPadding ? 'col-start-2 col-end-[-2]' : 'col-span-full'}
        ${hasBorder && 'shadow-outline'}
      `}
      poster={extensionlessSrc + ".png"}
      playsinline
      autoplay
      muted
      loop
    >
      <source src={extensionlessSrc + ".mp4"} type="video/mp4" />
    </video>
    <PauseIcon
      classes="pause-icon transform opacity-0 -rotate-[24deg] -translate-x-5 z-10 absolute top-[12px] left-[10px] transition-all duration-200 ease-in-out text-neutral-100 pointer-events-none drop-shadow-md"
    />
  </div>
</div>

<style>
  .with-border::after {
    box-shadow: inset 0 0 0 1px RGBA(0,0,0,0.04);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
    border-radius: 4px;
  }
</style>

<script>
  document.querySelectorAll("video")?.forEach((video) => {
    const pauseIcon = video.parentElement?.querySelector(
      ".pause-icon"
    ) as HTMLElement;

    const pauseVideo = () => {
      video.pause();
      video.classList.add("brightness-90");
      video.classList.remove(
        'hover:brightness-[95%]',
        'focus:brightness-[95%]'
      );
      pauseIcon.classList.remove(
        "opacity-0",
        "-rotate-[24deg]",
        "-translate-x-5",
      );
    };

    const playVideo = () => {
      video.play();
      video.classList.remove("brightness-90", "ease-in-out");
      video.classList.add(
        'hover:brightness-[95%]',
        'focus:brightness-[95%]'
      );
      pauseIcon.classList.add(
        "ease-in",
        "opacity-0",
        "rotate-[12deg]",
        "-translate-x-5"
      );

      setTimeout(() => {
        pauseIcon.classList.remove("ease-in", "rotate-[12deg]");
        pauseIcon.classList.add("-rotate-[24deg]", "ease-in-out");
      }, 200);
    };

    video.addEventListener("click", () => {
      if (video.paused) {
        playVideo();
      } else {
        pauseVideo();
      }
    });
  });
</script>



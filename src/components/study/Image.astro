---
export interface Props {
  src: string;
  alt: string;
  id: string;
  span?: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  orientation?: 'horizontal' | 'vertical';
  hasPadding?: boolean;
  classes?: string;
}

const { 
  src, 
  alt,
  id,
  span = 12,
  orientation = 'horizontal',
  hasPadding = false,
  classes = ""
} = Astro.props;

let colClasses = '';
let spanClasses = '';

switch (typeof span) {
  case 'number':
    colClasses = `grid-cols-${span}`;
    spanClasses = `col-span-${span}`;
    break;
  case 'object':
    for (const [breakpoint, cols] of Object.entries(span)) {
      if (breakpoint === 'base') {
        colClasses += `grid-cols-${cols} `;
        spanClasses += `col-span-${cols} `;
      } else {
        colClasses += `${breakpoint}:grid-cols-${cols} `;
        spanClasses += `${breakpoint}:col-span-${cols} `;
      }
    }
    break;
}
---

<div
  id={id}
  class={`
    grid gap-y-2 gap-x-4 border-t-[0.5px] border-[#636363]
    ${colClasses} ${spanClasses} ${classes}
  `}
>
  <p class="col-span-1 font-mono">{id}</p>
  <p class={`col-start-2 col-end-[-1]`}>{alt}</p>
  <div class={`
    grid col-span-full bg-neutral-800 gap-x-4
    ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
    ${colClasses}
    ${hasPadding ? '-mx-4 px-4 xs:mx-0 xs:px-0' : ''}
  `}>
    <img
      src={src}
      alt={alt}
      class={`
        h-full w-full object-cover
        select-none self-center
        ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
        ${hasPadding ? 'col-start-2 col-end-[-2]' : 'col-span-full'}
      `}
    />
    <!-- <figure class={`
      select-none self-center
      ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
      ${hasPadding ? 'col-start-2 col-end-[-2]' : 'col-span-full'}
    `}>
      <img
        src={src}
        alt={alt}
        class='h-full w-full object-cover'
      />
    </figure> -->
  </div>
</div>
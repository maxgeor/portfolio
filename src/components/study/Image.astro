---
export interface Props {
  src: string;
  alt: string;
  id: string;
  span?: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  description?: string;
  hasCaption?: boolean;
  hasBorder?: boolean;
  orientation?: 'horizontal' | 'vertical';
  hasPadding?: boolean;
  classes?: string;
}

const { 
  src, 
  alt,
  id,
  span = 12,
  hasCaption = true,
  description = '',
  orientation = 'horizontal',
  hasBorder = false,
  hasPadding = false,
  classes = ""
} = Astro.props;

let colClasses = '';
let spanClasses = '';

switch (typeof span) {
  case 'number':
    colClasses = `grid-cols-${span}`;
    spanClasses = `col-span-${span}`;
    break;
  case 'object':
    for (const [breakpoint, cols] of Object.entries(span)) {
      if (breakpoint === 'base') {
        colClasses += `grid-cols-${cols} `;
        spanClasses += `col-span-${cols} `;
      } else {
        colClasses += `${breakpoint}:grid-cols-${cols} `;
        spanClasses += `${breakpoint}:col-span-${cols} `;
      }
    }
    break;
}
---

<div
  id={id}
  class={`
    grid gap-x-[15px] gap-y-[5px] h-fit
    ${hasCaption ? '' : ''}
    ${colClasses} ${spanClasses} ${classes}
  `}
>
  {hasCaption && (
    <div class="flex gap-[15px] col-span-full">
      <p>{id}</p>
      <p>{alt}</p>
    </div>
  )}
  <figure class={`
    image grid col-span-full gap-x-[15px] 
    ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
    ${colClasses}
    ${hasPadding ? '-mx-3 px-3 xs:mx-0 xs:px-0' : ''}
  `}>
    <img
      src={src}
      alt={alt}
      class={`
         h-full w-full object-cover ring-1 ring-inset ring-black/10 bg-[#f5f6f8]
        select-none self-center
        ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
        ${hasPadding ? 'col-start-2 col-end-[-2]' : 'col-span-full'}
        ${hasBorder && 'border border-[#e9ebee]'}
      `}
    />
  </figure>
  {description && <p class="col-span-full mt-[5px]">{description}</p>}
</div>
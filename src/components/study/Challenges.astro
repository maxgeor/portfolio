---
import type { Props as ImageProps } from "./Image.astro";
import type { Props as VideoProps } from "./Video.astro";
import type { Props as CarouselProps } from "./Carousel.astro";

import Image from "./Image.astro";
import Video from "./Video.astro";
import Carousel from "./Carousel.astro";

export interface Props {
  challenges: {
    id: string;
    title: string;
    description: string;
    decisions: {
      title: string;
      description: string;
    }[];
    tradeoffs?: string[];
    image?: ImageProps;
    video?: VideoProps;
    carousel?: CarouselProps;
  }[];
}

const { challenges } = Astro.props;
---
<div id="challenges" class="relative col-span-full grid grid-cols-16 gap-x-2 gap-y-30 lg:gap-y-[60px]">
  <div class="border-t border-neutral-300 dark:border-neutral-700 pt-10 grid grid-cols-16 gap-2 col-span-full lg:mt-[30px]">
    <h2 class="col-span-full lg:col-start-3 text-neutral-800 dark:text-neutral-300 text-[19px] leading-5 lg:text-[28px] lg:leading-[30px] -tracking-[0.025rem] ">Challenges</h2>
  </div>
  <div class="hidden lg:flex flex-col gap-2 sticky top-[90px] pr-30 col-span-2">
    {challenges.map((challenge) => (
      <a href={'#' + challenge.id} class="!no-underline text-neutral-800 dark:text-neutral-300">{challenge.title}</a>
    ))}
  </div>
  {challenges.map((challenge) => (
    <>
      <div id={challenge.id} class="pr-15 lg:pr-0 col-span-full sm:col-span-7 lg:col-span-4 lg:col-start-3 flex flex-col gap-2 [&>p>mark]:bg-transparent [&>p>mark]:text-inherit [&>p>mark.solution]:text-neutral-800 [&>p>mark.solution]:dark:text-neutral-300">
        <h2 class="lg:hidden text-neutral-800 dark:text-neutral-300">{challenge.title}</h2>
        <p class="col-span-4" set:html={challenge.description}></p>
        {challenge.decisions.map((decision) => (
          <h3 class="col-span-4">{decision.title}</h3>
          <p set:html={decision.description}></p>
        ))}
        {challenge.tradeoffs && (
          <>
            <h3 class="col-span-4">Tradeoffs</h3>
            {challenge.tradeoffs.map((tradeoff) => (
              <p set:html={tradeoff}></p>
            ))}
          </>
        )}
      </div>
      {challenge.image && (
        <Image 
          {...challenge.image} 
          span={{ base: 16, sm: 9, lg: 8 }} 
          start={{ base: 1, lg: 8 }}
        />
      )}
      {challenge.video && (
        <Video 
          {...challenge.video} 
          span={{ base: 16, sm: 9, lg: 8 }} 
          start={{ base: 1, lg: 8 }}
          />
        )}
      {challenge.carousel && (
        <Carousel 
          {...challenge.carousel} 
          span={{ base: 16, sm: 9, lg: 8 }} 
          start={{ base: 1, lg: 8 }}
        />
      )}
      {/* <hr class="last:hidden border-neutral-300 dark:border-neutral-700 col-span-full lg:col-start-3 lg:col-span-13" /> */}
    </>
  ))}
</div>

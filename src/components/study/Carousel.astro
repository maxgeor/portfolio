---
import type { ResponsiveNumber, ResponsiveBool } from '../../utils/class-generator'
import { getCenteredColClasses, getPaddingClasses, getVisibilityClasses } from '../../utils/class-generator'
import Image from "./Image.astro";
import Video from "./Video.astro";
import Caption from './Caption.astro';
import InsetBorder from '../InsetBorder.astro';
import clsx from 'clsx';

type Media = {
  type: "image" | "video";
  id: string;
  src: string;
  alt: string;
  fit: 'cover' | 'contain';
  hasBorder?: boolean;
  classes?: string;
}

type Video = {
  type: "video";
  format: 'mp4' | 'mov';
} & Media;

type Image = {
  type: "image";
} & Media;

type Slide = Video | Image;

export interface Props {
  slides: Slide[];
  span: ResponsiveNumber;
  orientation?: 'horizontal' | 'vertical' | '3/2';
  isPadded: ResponsiveBool;
  hasBorder: ResponsiveBool;
  classes?: string;
}

const { 
  slides, 
  span = 12,
  orientation = 'horizontal', 
  isPadded = true,
  hasBorder = false,
  classes = "" 
} = Astro.props;

const paddingClasses = getPaddingClasses(isPadded);
const visibilityClasses = getVisibilityClasses(hasBorder);
const { spanClasses, startClasses, endClasses } = getCenteredColClasses(span)

let aspectRatio;

switch(orientation) {
  case 'horizontal':
    aspectRatio = 'aspect-[7/4]';
    break;
  case 'vertical':
    aspectRatio = 'aspect-[3/4]';
    break;
  case '3/2':
    aspectRatio = 'aspect-[3/2]';
    break;
  default:
    aspectRatio = 'aspect-[7/4]';
}
---

<div class={clsx('grid grid-cols-12 gap-y-2 gap-x-4 col-span-full carousel', classes)}>
  {Astro.slots.has('description') && (
    <div class="lg:hidden col-span-full sm:col-span-11 md:col-span-9 -mt-0.5 mb-[22px]">
      <slot name="description" />
    </div>
  )}
  <div class={clsx(
    "grid grid-cols-12 gap-x-4 gap-y-4 relative h-fit bg-neutral-200 dark:bg-neutral-900 lg:px-2 -mx-2 col-span-full",
    paddingClasses
  )}>
    <InsetBorder classes={visibilityClasses} />
    <button 
      aria-label="Previous slide" 
      class="prev-slide-btn hidden md:block absolute left-0 top-0 bottom-0 disabled:opacity-40 z-40 p-2 uppercase hover:opacity-100 disabled:hover:opacity-auto cursor-w-resize disabled:cursor-default" 
      disabled
    >
      Prev
    </button>
    <button 
      aria-label="Next slide" 
      class="next-slide-btn hidden md:block absolute right-0 top-0 bottom-0 disabled:opacity-40 hover:opacity-100 disabled:hover:opacity-auto z-40 p-2 uppercase cursor-e-resize disabled:cursor-default"
    >
      Next
    </button>
    <div class="mobile-slide-controls absolute inset-0 z-20	touch-manipulation">
      <button 
        aria-label="Previous slide"
        class="prev-slide-area  absolute left-0 top-0 bottom-0 w-1/2 cursor-w-resize disabled:cursor-default"
        tabindex="-1"
        disabled
      ></button>
      <button
        aria-label="Next slide"
        class="next-slide-area absolute right-0 top-0 bottom-0 w-1/2 cursor-e-resize disabled:cursor-default"
        tabindex="-1"
      ></button>
    </div>
    <div class="hidden lg:block slide-counter absolute top-2 right-2 z-40"></div>
    <div class={clsx(
      'touch-manipulation',
      spanClasses,
      startClasses,
      endClasses,
    )}>
      <div class={clsx(
        'relative overflow-hidden bg-neutral-200 dark:bg-neutral-900 flex items-center justify-center',
        aspectRatio,
      )}>
        {
          slides.map((slide, index) => (
            <div 
              data-index={index}
              class={clsx(
                `slide slide-${index} absolute h-fit w-full transition-all duration-[450ms] ease-in-out z-10`,
              )}
            >
              {slide.type === "video" ? (
                <Video
                  format={slide.format}
                  id={slide.id}
                  src={slide.src}
                  alt={slide.alt}
                  fit={slide.fit || 'cover'}
                  isPadded={false}
                  hasBorder={false}
                  hasCaption={false}
                  classes={slide.classes}
                />
              ) : (
                <Image
                  id={slide.id}
                  src={slide.src}
                  alt={slide.alt}
                  fit={slide.fit || 'cover'}
                  orientation={orientation}
                  isPadded={false}
                  hasBorder={false}
                  hasCaption={false}
                  classes={slide.classes}
                />
              )}
            </div>
          ))
        }
      </div>
    </div>
  </div>
  <div class={clsx(
    'grid grid-cols-12 gap-4 col-span-full', 
  )}>
    <div class={clsx(
      "flex justify-between gap-4 -my-0.5",
      Astro.slots.has('description') ? 'col-span-full lg:col-span-2' : 'col-span-full '
    )}>
      <div class="flex flex-col">
        {slides?.map((slide, index) => (
          <button class={`caption caption-${index} touch-manipulation uppercase h-fit w-fit text-black dark:text-white text-left whitespace-nowrap`}>
            <Caption id={slide.id} text={slide.alt} />
          </button>
        ))}
      </div>
      <div class="lg:hidden slide-counter"></div>
    </div>
    {Astro.slots.has('description') && (
      <div class="hidden lg:block lg:col-span-6 xl:col-span-5 3xl:col-span-4 3xl:max-w-[85ch] -my-0.5">
        <slot name="description" />
      </div>
    )}
  </div>
</div>

<style>
  .caption {
    opacity: 0.4;
  }

  .caption.current {
    opacity: 1;
  }
</style>

<script>
  const carousels: NodeListOf<HTMLElement> = document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");
    const captions: NodeListOf<HTMLElement> = carousel.querySelectorAll(".caption");
    const nextSlideBtn = carousel.querySelector(".next-slide-btn") as HTMLButtonElement | null;
    const prevSlideBtn = carousel.querySelector(".prev-slide-btn") as HTMLButtonElement | null;
    const slideCounters: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide-counter");
    const prevSlideArea = carousel.querySelector(".prev-slide-area") as HTMLButtonElement | null;
    const nextSlideArea = carousel.querySelector(".next-slide-area") as HTMLButtonElement | null;

    let curSlide = 0;
    const totalSlides = slides.length;

    const updateButtons = () => {
      if (prevSlideBtn) prevSlideBtn.disabled = curSlide === 0;
      if (nextSlideBtn) nextSlideBtn.disabled = curSlide === totalSlides - 1;
      if (prevSlideArea) prevSlideArea.disabled = curSlide === 0;
      if (nextSlideArea) nextSlideArea.disabled = curSlide === totalSlides - 1;
    }

    const updateCounters = () => {
      slideCounters.forEach(counter => {
        counter.textContent = `${curSlide + 1} / ${totalSlides}`;
      });
    }

    const slideTo = (position: number) => {
      curSlide = position;

      slides.forEach((slide, index) => {
        slide.style.transform = `translateX(${100 * (index - curSlide)}%)`;
      });

      updateCaption();
      updateButtons();
      updateCounters();
    }

    const updateCaption = () => {
      captions.forEach((caption, index) => {
        index === curSlide
          ? caption.classList.add('current')
          : caption.classList.remove('current');
      });
    }

    slideTo(curSlide);

    if (nextSlideBtn) nextSlideBtn.addEventListener("click", () => slideTo(Math.min(curSlide + 1, totalSlides - 1)));
    if (prevSlideBtn) prevSlideBtn.addEventListener("click", () => slideTo(Math.max(curSlide - 1, 0)));
    if (nextSlideArea) nextSlideArea.addEventListener("click", () => slideTo(Math.min(curSlide + 1, totalSlides - 1)));
    if (prevSlideArea) prevSlideArea.addEventListener("click", () => slideTo(Math.max(curSlide - 1, 0)));

    captions.forEach((caption, index) => {
      caption.addEventListener("click", () => slideTo(index));
    });
  });
</script>
---
import Image from "./Image.astro";
import Video from "./Video.astro";

export interface Props {
  slides: {
    type: "image" | "video";
    src: string;
    alt: string;
    id: string;
    span?: number | { 
      base: number, 
      sm?: number, 
      md?: number, 
      lg?: number, 
      xl?: number 
    };
    hasPadding?: boolean;
    hasBorder?: boolean;
    classes?: string;
  }[];
  span?: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  orientation?: 'horizontal' | 'vertical';
  classes?: string;
}

const { slides, orientation = 'horizontal', classes = "" } = Astro.props;
---

<div class={`carousel grid grid-cols-12 col-span-full gap-3 relative h-fit ${classes}`}>
  <button 
    disabled="true" 
    aria-label="Previous slide" 
    class={`
      group hidden btn-prev opacity-[40%] absolute left-0 top-1/2 -translate-y-1/2 p-3 -m-3 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-pink
      ${orientation === 'vertical' ? 'xs:block' : 'md:block'}
    `}
  >
    <div class="md:disabled:group-hover:bg-transparent md:group-hover:bg-neutral-200 transition duration-75">
      Back
    </div>
  </button>
  <div class={`hidden absolute top-0 right-0 justify-self-center ${orientation === 'vertical' ? 'xs:flex' : 'md:flex'}`}>
    <span class="counter-current">1</span>
    <span>/</span>
    <span class="counter-total">{slides.length}</span>
  </div>
  <button 
    aria-label="Next slide" 
    class={`
      btn-next hidden absolute top-1/2 -translate-y-1/2 right-0 p-3 -m-3  group disabled:group-hover:bg-current focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-pink
      ${orientation === 'vertical' ? 'xs:block' : 'md:block'}
    `}
  >
    <div class="md:disabled:group-hover:bg-transparent md:group-hover:bg-neutral-200 transition duration-75">
      Next
    </div>
  </button>
  <div class={`
    flex flex-col gap-2 col-span-full 
    ${orientation === 'vertical' ? (
      'xs:col-span-8 xs:col-start-3'
    ) : (
      'md:col-span-8 md:col-start-3'
    )}
  `}>
    <div class={`
      relative w-full rotate-0 overflow-hidden  border-b border-neutral-150
      ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
    `}>
      {
        slides?.map((slide, index) => (
          <div class={`
            slide slide-${index} 
            absolute h-fit w-full transition-all duration-[450ms] ease-in-out 
          `}>
            {slide.type === "video" ? (
              <Video
                src={slide.src}
                alt={slide.alt}
                id={slide.id}
                
                span={slide.span || 12}
                hasPadding={slide.hasPadding}
                hasBorder={true}
                classes={slide.classes}
              />
            ) : (
              <Image
                src={slide.src}
                alt={slide.alt}
                id={slide.id}
                span={slide.span}
                hasPadding={slide.hasPadding}
                hasBorder={true}
                orientation={orientation}
                classes={slide.classes}
              />
            )}
          </div>
        ))
      }
    </div>
    <div 
      class={`
        slide-titles relative flex flex-col col-span-full xl:col-span-2 pr-[56px]
        ${orientation === 'vertical' ? 'xs:col-start-3 xs:col-span-3 ' : 'md:col-start-3 md:col-span-3'}
      `}
      style="text-wrap: pretty;"
    >
      {slides.map((slide, index) => (
        <button 
          data-position={index} 
          class={`
            slide-title slide-title-${index}
            group w-fit px-[3px] -mx-[3px]  focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-pink
            ${index === 0 ? 'active' : ''}
          `}
        >
          <div class="!text-black  flex gap-3 text-left group-hover:text-black group-focus:text-black">
            <span>{slide.id}</span>
            <p>{slide.alt}</p>
          </div>
        </button>
      ))}
      <div class={`absolute -top-0.5 right-0 flex items-center gap-0.5 ${orientation === 'vertical' ? 'xs:hidden' : 'md:hidden'}`}>
        <button 
          disabled="true" 
          aria-label="Previous slide" 
          class={`
            group btn-prev opacity-[40%] p-3 -m-3 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-pink
            ${orientation === 'vertical' ? 'xs:block' : 'md:block'}
          `}
        >
          <div class="md:disabled:group-hover:bg-transparent md:group-hover:bg-neutral-200 transition duration-75">
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.84182 3.13514C9.04327 3.32401 9.05348 3.64042 8.86462 3.84188L5.43521 7.49991L8.86462 11.1579C9.05348 11.3594 9.04327 11.6758 8.84182 11.8647C8.64036 12.0535 8.32394 12.0433 8.13508 11.8419L4.38508 7.84188C4.20477 7.64955 4.20477 7.35027 4.38508 7.15794L8.13508 3.15794C8.32394 2.95648 8.64036 2.94628 8.84182 3.13514Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
          </div>
        </button>
        <div class="flex opacity-100 text-black">
          <span class="counter-current">1</span>
          <span>/</span>
          <span class="counter-total">{slides.length}</span>
        </div>
        <button 
          aria-label="Next slide" 
          class={`btn-next p-3 -m-3  group disabled:group-hover:bg-current focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-pink`}
        >
          <div class="md:disabled:group-hover:bg-transparent md:group-hover:bg-neutral-200 transition duration-75">
            <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
          </div>
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .slide-titles > button > div {
    color: #fff;
    opacity: 0.4;
  }
  .slide-titles > button.active > div {
    opacity: 1;
  }
  
  .slide-titles > button:hover > div {
    opacity: 1;
  }
</style>

<script>
  const carousels: NodeListOf<HTMLElement> = document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");
    const counters = carousel.querySelectorAll(".counter-current") as NodeListOf<HTMLElement>;
    const slideTitles: NodeListOf<HTMLButtonElement> = carousel.querySelectorAll(".slide-title");
    const prevSlideBtns = carousel.querySelectorAll(".btn-prev") as NodeListOf<HTMLButtonElement>;
    const nextSlideBtns = carousel.querySelectorAll(".btn-next") as NodeListOf<HTMLButtonElement>;

    let curSlide = 0;

    const isFirstSlide = () => curSlide === 0;
    const isLastSlide = () => curSlide === slides.length - 1;

    const slideTo = (position: number) => {
      curSlide = position;

      slides.forEach((slide, indx) => 
        slide.style.transform = `translateX(${100 * (indx - position)}%)`
      );

      if (counters.length > 0) {
        counters.forEach(counter => counter.innerHTML = `${curSlide + 1}`)
      }

      if (nextSlideBtns.length > 0) {
        nextSlideBtns.forEach(btn => {
          if (!isLastSlide() && btn.disabled) {
            btn.disabled = false;
            btn.style.opacity = "100%";
          } else if (isLastSlide() && !btn.disabled) {
            btn.disabled = true;
            btn.style.opacity = "40%";
          }
        });
      }

      if (prevSlideBtns.length > 0) {
        prevSlideBtns.forEach(btn => {
          if (!isFirstSlide() && btn.disabled) {
            btn.disabled = false;
            btn.style.opacity = "100%";
          } else if (isFirstSlide() && !btn.disabled) {
            btn.disabled = true;
            btn.style.opacity = "40%";
          }
        });
      }

      slideTitles.forEach(slide => {
        slide.classList.contains(`slide-title-${curSlide}`)
          ? slide.classList.add('active')
          : slide.classList.remove('active');
      });
    }

    slides.forEach((slide, indx) => (slide.style.transform = `translateX(${indx * 100}%)`));

    slideTitles.forEach(title => title.addEventListener('click', () => {
      const position = parseInt(title.dataset?.position || '0');
      slideTo(position);
    }));

    if (prevSlideBtns.length > 0) {
      prevSlideBtns.forEach(btn => {
        btn.addEventListener("click", () => slideTo(curSlide - 1));
      });
    }

    if (nextSlideBtns.length > 0) {
      nextSlideBtns.forEach(btn => {
        btn.addEventListener("click", () => slideTo(curSlide + 1));
      });
    }
  });
</script>

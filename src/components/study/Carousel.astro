---
import type { Cols, FullBleed } from '../../utils/class-generator'
import { getColClasses, getFullBleedClasses } from '../../utils/class-generator'
import Image from "./Image.astro";
import Video from "./Video.astro";
import clsx from 'clsx';

export interface Props {
  slides: {
    type: "image" | "video";
    src: string;
    alt: string;
    span?: Cols;
    start?: Cols;
    end?: Cols;
    hasBorder?: boolean;
    classes?: string;
  }[];
  description?: string;
  span?: Cols;
  start?: Cols;
  end?: Cols;
  fullBleed?: FullBleed;
  orientation?: 'horizontal' | 'vertical';
  hasBorder?: boolean
  classes?: string;
}

const { 
  slides, 
  description, 
  orientation = 'horizontal', 
  hasBorder, 
  fullBleed = false,
  span = 16,
  start,
  end,
  classes = "" 
} = Astro.props;

const { spanClasses, startClasses, endClasses } = getColClasses(span, start, end);
const { bleedClasses, paddingClasses } = getFullBleedClasses(fullBleed);
---

<div class={clsx(
  'carousel flex flex-col gap-2 relative h-fit',
  spanClasses,
  startClasses,
  endClasses,
  bleedClasses,
  classes
)}>
  <div class={clsx(
    'relative w-full rotate-0 overflow-hidden',
    orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]',
    hasBorder ? 'border  border-black dark:border-neutral-300' : ''
  )}>
    <button aria-label="Next slide" class="next-slide-btn absolute inset-0 opacity-0 z-40"></button>
    {
      [...slides, slides[0]].map((slide, index) => (
        <div 
          data-index={index}
          class={`
            slide slide-${index} 
            absolute h-fit w-full transition-all duration-[450ms] ease-in-out z-10
          `}
        >
          {slide.type === "video" ? (
            <Video
              src={slide.src}
              alt={slide.alt}
              span={slide.span}
              start={slide.start}
              end={slide.end}
              hasBorder={false}
              hasCaption={false}
              classes={slide.classes}
            />
          ) : (
            <Image
              src={slide.src}
              alt={slide.alt}
              span={slide.span}
              start={slide.start}
              end={slide.end}
              hasBorder={false}
              orientation={orientation}
              hasCaption={false}
              classes={slide.classes}
            />
          )}
        </div>
      ))
    }
  </div>
  <div class={clsx(paddingClasses)}>
    <div class="relative flex flex-col gap-x-2 gap-y-2">
      <div class="relative min-h-[15px] w-full rotate-0 overflow-hidden">
        {slides?.map((slide, index) => (
          <div class={`caption caption-${index} absolute h-fit w-full transition-opacity text-neutral-800 dark:text-neutral-300 duration-[450ms] ease-in-out`}>
            <p>{slide.alt}</p>
          </div>
        ))}
      </div>
      {description && <p class="col-span-4 text-justify hyphens-auto max-w-[80ch] pr-30">{description}</p>}
      <div class={`absolute top-[5px] right-0 flex gap-1 text-inherit `}>
        {slides?.map(() => (
          <span 
            class={`dot h-[4px] w-[4px] bg-neutral-800 dark:bg-neutral-300 rounded-full transition-opacity duration-[300ms]`}
          ></span>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
  .caption {
    opacity: 0;
  }

  .caption.current {
    opacity: 1;
  }
  .dot {
    opacity: 0.30;
  }

  .dot.current {
    opacity: 1;
  }

  .notransition {
    -webkit-transition: none !important;
    -moz-transition: none !important;
    -o-transition: none !important;
    transition: none !important;
  }

  .light-border::after {
    box-shadow: inset 0 0 0 1px RGBA(255,255,255,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .dark-border::after {
    box-shadow: inset 0 0 0 1px RGBA(0,0,0,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }
</style>

<script>
  const carousels: NodeListOf<HTMLElement> = document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");
    const captions: NodeListOf<HTMLElement> = carousel.querySelectorAll(".caption");
    const dots = carousel.querySelectorAll(".dot") as NodeListOf<HTMLElement>;
    const nextSlideBtns = carousel.querySelectorAll(".next-slide-btn") as NodeListOf<HTMLButtonElement>;

    let curSlide = 0;
    const totalSlides = slides.length;
    const actualSlides = totalSlides - 1; // Number of unique slides

    const slideTo = (position: number) => {
      curSlide = position;

      slides.forEach((slide, index) => {
        slide.style.transform = `translateX(${100 * (index - curSlide)}%)`;
      });

      updateCaption();
      updateDots();

      if (curSlide >= actualSlides) {
        setTimeout(resetToFirstSlide, 450); // Wait for transition to complete
      }
    }

    const updateCaption = () => {
      const activeCaptionIndex = curSlide % actualSlides;
      captions.forEach((caption, index) => {
        index === activeCaptionIndex
          ? caption.classList.add('current')
          : caption.classList.remove('current');
      });
    }

    const updateDots = () => {
      const activeDotIndex = curSlide % actualSlides;
      dots.forEach((dot, index) => {
        index === activeDotIndex
          ? dot.classList.add('current')
          : dot.classList.remove('current');
      });
    }

    const resetToFirstSlide = () => {
      curSlide = 0;
      slides.forEach((slide, index) => {
        slide.classList.add('notransition');
        slide.style.transform = `translateX(${100 * (index - curSlide)}%)`;
      });
      setTimeout(() => {
        slides.forEach((slide) => {
          slide.classList.remove('notransition');
        });
      }, 50);
      updateCaption();
      updateDots();
    }

    slideTo(curSlide);

    if (nextSlideBtns.length > 0) {
      nextSlideBtns.forEach(btn => {
        btn.addEventListener("click", () => slideTo(curSlide + 1));
      });
    }
  });
</script>

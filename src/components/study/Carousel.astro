---
import Image from "./Image.astro";
import Video from "./Video.astro";
import Caption from "./Caption.astro";

export interface Props {
  slides: {
    type: "image" | "video";
    src: string;
    alt: string;
    span?: number | { 
      base: number, 
      sm?: number, 
      md?: number, 
      lg?: number, 
      xl?: number 
    };
    hasPadding?: boolean;
    hasBorder?: boolean;
    classes?: string;
  }[];
  span?: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  orientation?: 'horizontal' | 'vertical';
  hasBorder?: boolean
  classes?: string;
}

const { slides, orientation = 'horizontal', hasBorder, span = 12, classes = "" } = Astro.props;
---

<div class={`carousel grid grid-cols-12 gap-15 relative h-fit ${classes} ${span}`}>
  <div class={`flex items-center gap-1 text-inherit absolute top-[7px] right-0 bg-white dark:bg-black z-10`}>
    {slides?.map(() => (
      <span 
        class={`dot h-[5px] w-[5px] bg-neutral-600 dark:bg-neutral-300 rounded-full transition-opacity duration-[300ms]`}
      ></span>
    ))}
  </div>
  <div class={`flex flex-col gap-2 col-span-full `}>
    <div class="flex flex-col gap-5">
      <div class="relative min-h-[15px] w-full rotate-0 overflow-hidden">
        {slides?.map((slide, index) => (
          <div class={`caption caption-${index} absolute h-fit w-full transition-opacity duration-[450ms] ease-in-out`}>
            <p>{slide.alt}</p>
          </div>
        ))}
      </div>
      <div class={`
        relative w-full rotate-0 overflow-hidden 
        ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
        ${hasBorder ? 'border border-neutral-200 dark:border-neutral-800' : ''}
      `}>
        <button aria-label="Next slide" class="next-slide-btn absolute inset-0 opacity-0 z-40"></button>
        {
          slides?.map((slide, index) => (
            <div class={`
              slide slide-${index} 
              absolute h-fit w-full transition-all duration-[450ms] ease-in-out z-10
            `}>
              {slide.type === "video" ? (
                <Video
                  src={slide.src}
                  alt={slide.alt}
                  span={slide.span || 12}
                  hasPadding={slide.hasPadding}
                  hasBorder={false}
                  hasCaption={false}
                  classes={slide.classes}
                />
              ) : (
                <Image
                  src={slide.src}
                  alt={slide.alt}
                  span={slide.span}
                  hasPadding={slide.hasPadding}
                  hasBorder={false}
                  orientation={orientation}
                  hasCaption={false}
                  classes={slide.classes}
                />
              )}
            </div>
          ))
        }
      </div>
    </div>
  </div>
</div>

<style>
  .caption {
    opacity: 0;
  }

  .caption.current {
    opacity: 1;
  }
  .dot {
    opacity: 0.35;
  }

  .dot.current {
    opacity: 1;
  }

  .notransition {
    -webkit-transition: none !important;
    -moz-transition: none !important;
    -o-transition: none !important;
    transition: none !important;
  }

  .light-border::after {
    box-shadow: inset 0 0 0 1px RGBA(255,255,255,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .dark-border::after {
    box-shadow: inset 0 0 0 1px RGBA(0,0,0,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }
</style>

<script>
  const carousels: NodeListOf<HTMLElement> = document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");
    const captions: NodeListOf<HTMLElement> = carousel.querySelectorAll(".caption");
    const dots = carousel.querySelectorAll(".dot") as NodeListOf<HTMLElement>;
    const nextSlideBtns = carousel.querySelectorAll(".next-slide-btn") as NodeListOf<HTMLButtonElement>;

    let curSlide = 0;

    const slideTo = (position: number) => {
      curSlide = position > slides.length - 1 ? 0 : position;

      slides.forEach((slide, index) => {
        slide.style.transform = `translateX(${100 * (index - curSlide)}%)`;
      });

      captions.forEach((caption, index) => {
        index === curSlide
          ? caption.classList.add('current')
          : caption.classList.remove('current');
      });
      
      dots.forEach((dot, index) => {
        index === curSlide
          ? dot.classList.add('current')
          : dot.classList.remove('current');
      });
    }

    slideTo(curSlide);

    if (nextSlideBtns.length > 0) {
      nextSlideBtns.forEach(btn => {
        btn.addEventListener("click", () => slideTo(curSlide + 1));
      });
    }
  });
</script>

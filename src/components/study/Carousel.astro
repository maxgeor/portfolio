---
import Image from "./Image.astro";
import Video from "./Video.astro";
import Button from "../Button.astro";
import ChevronLeftIcon from "../icons/ChevronLeftIcon.astro";
import ChevronRightIcon from "../icons/ChevronRightIcon.astro";

export interface Props {
  slides: {
    type: "image" | "video";
    src: string;
    alt: string;
    id: string;
    span?: number | { 
      base: number, 
      sm?: number, 
      md?: number, 
      lg?: number, 
      xl?: number 
    };
    orientation?: 'horizontal' | 'vertical';
    hasPadding?: boolean;
  }[];
  span?: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  classes?: string;
}
const { slides, classes = "" } = Astro.props;
---

<div
  class={`
    carousel grid grid-cols-12 col-span-full  gap-4 relative  h-fit
    ${classes}
  `}
>
  <span class="counter flex font-mono absolute bottom-4 md:top-6 right-0">
    <span class="counter-current">1</span>
    <span>\</span>
    <span class="counter-total">{slides.length}</span>
  </span>
  <button 
    disabled="true" 
    aria-label="Previous slide" 
    class="btn-prev absolute top-1/2 -translate-y-1/2 left-0 opacity-50"
  >
    Previous
  </button>
  <button 
    aria-label="Next slide" 
    class="btn-next absolute top-1/2 -translate-y-1/2 right-0"
  >
    Next
  </button>
  <div class="flex flex-col gap-4 col-span-full md:col-span-8 md:col-start-3">
    <div class="relative aspect-[7/4] w-full rotate-0 overflow-hidden bg-neutral-900">
      {
        slides?.map((slide, index) => (
          <div class={`
            slide slide-${index} 
            absolute h-fit w-full transition-all duration-[450ms] ease-in-out
          `}>
            {slide.type === "video" ? (
              <Video
                src={slide.src}
                alt={slide.alt}
                id={slide.id}
                span={slide.span || 12}
                orientation={slide.orientation}
                hasPadding={slide.hasPadding}
              />
            ) : (
              <Image
                src={slide.src}
                alt={slide.alt}
                id={slide.id}
                span={slide.span}
                hasPadding={slide.hasPadding}
              />
            )}
          </div>
        ))
      }
    </div>
    <div 
      class="slide-titles md:col-start-3 md:col-span-3 col-span-full xl:col-span-2" 
      style="text-wrap: pretty;"
    >
      {slides.map((slide, index) => (
        <button 
          data-position={index} 
          class={`
            slide-title slide-title-${index} flex gap-4 hover:text-[#C5C5C5] focus:text-[#C5C5C5]
            ${index === 0 ? 'active' : ''}
          `}
        >
          <span class="font-mono">{slide.id}</span>
          <p class="">{slide.alt}</p>
        </button>
      ))}
    </div>
  </div>
</div>

<style is:inline>
  .slide-titles > * {
    color: #636363;
  }

  .slide-titles > .active {
    color: #C5C5C5;
  }
</style>

<script>
  const carousels: NodeListOf<HTMLElement> = document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");
    const counter: HTMLSpanElement | null = carousel.querySelector(".counter-current");
    const slideTitles: NodeListOf<HTMLButtonElement> = carousel.querySelectorAll(".slide-title");
    const prevSlideBtn = carousel.querySelector(".btn-prev") as HTMLButtonElement;
    const nextSlideBtn = carousel.querySelector(".btn-next") as HTMLButtonElement;

    let curSlide = 0;

    const isFirstSlide = () => curSlide === 0;
    const isLastSlide = () => curSlide === slides.length - 1;

    const slideTo = (position: number) => {
      curSlide = position;

      slides.forEach((slide, indx) => 
        slide.style.transform = `translateX(${100 * (indx - position)}%)`
      );

      if (counter) counter.innerHTML = `${curSlide + 1}`;

      if (nextSlideBtn) {
        if (!isLastSlide() && nextSlideBtn.disabled) {
          nextSlideBtn.disabled = false;
          nextSlideBtn.style.opacity = "100%";
        } else if (isLastSlide() && !nextSlideBtn.disabled) {
          nextSlideBtn.disabled = true;
          nextSlideBtn.style.opacity = "50%";
        }
      }

      if (prevSlideBtn) {
        if (!isFirstSlide() && prevSlideBtn.disabled) {
          prevSlideBtn.disabled = false;
          prevSlideBtn.style.opacity = "100%";
        } else if (isFirstSlide() && !prevSlideBtn.disabled) {
          prevSlideBtn.disabled = true;
          prevSlideBtn.style.opacity = "50%";
        }
      }

      [...slideTitles].forEach(slide => {
        slide.classList.contains(`slide-title-${curSlide}`)
          ? slide.classList.add('active')
          : slide.classList.remove('active');
      });
    }

    slides.forEach((slide, indx) => (slide.style.transform = `translateX(${indx * 100}%)`));

    slideTitles.forEach(title => title.addEventListener('click', () => {
      const position = parseInt(title.dataset?.position || '0');
      slideTo(position);
    }));

    prevSlideBtn?.addEventListener("click", () => slideTo(curSlide - 1));
    nextSlideBtn?.addEventListener("click", () => slideTo(curSlide + 1));
  });
</script>

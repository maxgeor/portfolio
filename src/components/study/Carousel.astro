---
import Image from "./Image.astro";
import Video from "./Video.astro";
import Caption from "./Caption.astro";

export interface Props {
  slides: {
    type: "image" | "video";
    src: string;
    alt: string;
    id: string;
    span?: number | { 
      base: number, 
      sm?: number, 
      md?: number, 
      lg?: number, 
      xl?: number 
    };
    hasPadding?: boolean;
    hasBorder?: boolean;
    classes?: string;
  }[];
  span?: number | { 
    base: number, 
    sm?: number, 
    md?: number, 
    lg?: number, 
    xl?: number 
  };
  orientation?: 'horizontal' | 'vertical';
  hasBorder?: boolean
  classes?: string;
}

const { slides, orientation = 'horizontal', hasBorder, classes = "" } = Astro.props;
---

<div class={`carousel grid grid-cols-12 col-span-full gap-15 relative h-fit ${classes}`}>
  <div class={`flex gap-1 text-inherit absolute top-[7px] right-0`}>
    {slides?.map((_, index) => (
      <span 
        class={`dot h-[5px] w-[5px] bg-neutral-600 dark:bg-neutral-300 rounded-full ${index === 0 ? 'active ' : 'opacity-[40%]'}`}
      ></span>
    ))}
  </div>
  <div class={`
    flex flex-col gap-2 col-span-full 
  `}>
    <div class="flex flex-col gap-5">
      <div class="relative min-h-[15px] w-full rotate-0 overflow-hidden">
        {slides?.map((slide, index) => (
          <div class={`slide-caption slide-caption-${index} absolute h-fit w-full transition-all duration-[450ms] ease-in-out`}>
            <Caption id={slide.id} text={slide.alt} />
          </div>
        ))}
      </div>
      <div class={`
        relative w-full rotate-0 overflow-hidden 
        ${orientation === 'vertical' ? 'aspect-[2/3]' : 'aspect-[7/4]'}
        ${hasBorder ? 'border border-neutral-200 dark:border-neutral-800' : ''}
      `}>
        <button aria-label="Next slide" class={`btn-next absolute inset-0 opacity-0`}></button>
        {
          slides?.map((slide, index) => (
            <div class={`
              slide slide-${index} 
              absolute h-fit w-full transition-all duration-[450ms] ease-in-out z-10
            `}>
              {slide.type === "video" ? (
                <Video
                  src={slide.src}
                  alt={slide.alt}
                  id={slide.id}
                  span={slide.span || 12}
                  hasPadding={slide.hasPadding}
                  hasBorder={false}
                  hasCaption={false}
                  classes={slide.classes}
                />
              ) : (
                <Image
                  src={slide.src}
                  alt={slide.alt}
                  id={slide.id}
                  span={slide.span}
                  hasPadding={slide.hasPadding}
                  hasBorder={false}
                  orientation={orientation}
                  hasCaption={false}
                  classes={slide.classes}
                />
              )}
            </div>
          ))
        }
      </div>
    </div>
    <!-- <div 
      class={`
        slide-titles relative flex flex-col col-span-full xl:col-span-2 pr-[56px]
        ${orientation === 'vertical' ? 'xs:col-start-3 xs:col-span-3 ' : 'md:col-start-3 md:col-span-3'}
      `}
      style="text-wrap: pretty;"
    >
      {slides.map((slide, index) => (
        <button 
          data-position={index} 
          class={`
            slide-title slide-title-${index}
            group w-fit px-[3px] -mx-[3px] hover:bg-transparent
            ${index === 0 ? 'active' : ''}
          `}
        >
          <div class="opacity-40  flex gap-15 text-left group-hover:opacity-100 group-focus:opacity-100">
            <span>{slide.id}</span>
            <p>{slide.alt}</p>
          </div>
        </button>
      ))}
      <div class={`absolute -top-0.5 -right-1.5 flex items-center gap-0 ${orientation === 'vertical' ? 'xs:hidden' : 'md:hidden'}`}>
        <button 
          disabled="true" 
          aria-label="Previous slide" 
          class={`
            group btn-prev opacity-40 p-15 -m-3 hover:bg-transparent
            ${orientation === 'vertical' ? 'xs:block' : 'md:block'}
          `}
        > 
          <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.84182 3.13514C9.04327 3.32401 9.05348 3.64042 8.86462 3.84188L5.43521 7.49991L8.86462 11.1579C9.05348 11.3594 9.04327 11.6758 8.84182 11.8647C8.64036 12.0535 8.32394 12.0433 8.13508 11.8419L4.38508 7.84188C4.20477 7.64955 4.20477 7.35027 4.38508 7.15794L8.13508 3.15794C8.32394 2.95648 8.64036 2.94628 8.84182 3.13514Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
        </button>
        <div class="flex">
          <span class="counter-current">1</span>
          <span>/</span>
          <span class="counter-total">{slides.length}</span>
        </div>
        <button 
          aria-label="Next slide" 
          class={`btn-next p-15 -m-3 group disabled:group-hover:bg-current hover:bg-transparent`}
        >
          <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
        </button>
      </div>
    </div> -->
  </div>
</div>

<style>
  .light-border::after {
    box-shadow: inset 0 0 0 1px RGBA(255,255,255,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .dark-border::after {
    box-shadow: inset 0 0 0 1px RGBA(0,0,0,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }
  
  .slide-titles > button > div {
    opacity: 0.4;
  }

  .slide-titles > button.active > div {
    opacity: 1;
  }
  
  .slide-titles > button:hover > div {
    opacity: 1;
  }
</style>

<script>
  const carousels: NodeListOf<HTMLElement> = document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");
    const slideCaptions: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide-caption");
    const counters = carousel.querySelectorAll(".counter-current") as NodeListOf<HTMLElement>;
    const slideTitles: NodeListOf<HTMLButtonElement> = carousel.querySelectorAll(".slide-title");
    const prevSlideBtns = carousel.querySelectorAll(".btn-prev") as NodeListOf<HTMLButtonElement>;
    const nextSlideBtns = carousel.querySelectorAll(".btn-next") as NodeListOf<HTMLButtonElement>;

    let curSlide = 0;

    const isFirstSlide = () => curSlide === 0;
    const isLastSlide = () => curSlide === slides.length - 1;

    const slideTo = (position: number) => {
      curSlide = position;

      slides.forEach((slide, index) => {
        slide.style.transform = `translateX(${100 * (index - position)}%)`;
        slideCaptions[index].style.transform = `translateX(${100 * (index - position)}%)`;
      });

      if (counters.length > 0) {
        counters.forEach(counter => counter.innerHTML = `${curSlide + 1}`)
      }

      if (nextSlideBtns.length > 0) {
        nextSlideBtns.forEach(btn => {
          if (!isLastSlide() && btn.disabled) {
            btn.disabled = false;
            btn.style.opacity = "100%";
          } else if (isLastSlide() && !btn.disabled) {
            btn.disabled = true;
            btn.style.opacity = "40%";
          }
        });
      }

      if (prevSlideBtns.length > 0) {
        prevSlideBtns.forEach(btn => {
          if (!isFirstSlide() && btn.disabled) {
            btn.disabled = false;
            btn.style.opacity = "100%";
          } else if (isFirstSlide() && !btn.disabled) {
            btn.disabled = true;
            btn.style.opacity = "40%";
          }
        });
      }

      slideTitles.forEach(slide => {
        slide.classList.contains(`slide-title-${curSlide}`)
          ? slide.classList.add('active')
          : slide.classList.remove('active');
      });
    }

    slides.forEach((slide, index) => {
      slide.style.transform = `translateX(${index * 100}%)`
      slideCaptions[index].style.transform = `translateX(${index * 100}%)`
    });

    slideTitles.forEach(title => title.addEventListener('click', () => {
      const position = parseInt(title.dataset?.position || '0');
      slideTo(position);
    }));

    if (prevSlideBtns.length > 0) {
      prevSlideBtns.forEach(btn => {
        btn.addEventListener("click", () => slideTo(curSlide - 1));
      });
    }

    if (nextSlideBtns.length > 0) {
      nextSlideBtns.forEach(btn => {
        btn.addEventListener("click", () => slideTo(curSlide + 1));
      });
    }
  });
</script>

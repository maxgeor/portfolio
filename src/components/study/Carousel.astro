---
import Image from "./Image.astro";
import Video from "./Video.astro";
import Button from "../Button.astro";
import ChevronLeftIcon from "../icons/ChevronLeftIcon.astro";
import ChevronRightIcon from "../icons/ChevronRightIcon.astro";

export interface Props {
  slides: {
    type: "image" | "video";
    src: string;
    alt: string;
  }[];
  classes?: string;
}
const { slides, classes = "" } = Astro.props;
---

<div
  class={`
    carousel relative -mx-4 sm:-mx-4 md:mx-0 border border-neutral-800 h-fit
    ${classes}
  `}
>
  <Button
    disabled={true}
    ariaLabel="Previous slide"
    ariaHidden="true"
    invisiblePadding="px-2 py-14 -mx-2 -my-14"
    classes="btn-prev group absolute top-1/2 left-2 sm:left-4 md:-left-[13px] xl:-left-[17px] z-20 transform -translate-y-1/2 hover:scale-[102%] active:scale-[98%] opacity-0 transition-all duration-200 -mt-0"
  >
    <ChevronLeftIcon />
  </Button>
  <Button
    ariaLabel="Next slide"
    invisiblePadding="px-2 py-14 -mx-2 -my-14"
    classes="btn-next group absolute top-1/2 right-2 sm:right-4 md:-right-[13px] xl:-right-[17px] z-20 transform -translate-y-1/2 hover:scale-[102%] active:scale-[98%] duration-200 -mt-0"
  >
    <ChevronRightIcon />
  </Button>
  <div
    class="relative aspect-[7/4] w-full rotate-0 overflow-hidden bg-neutral-900"
  >
    {
      slides?.map((slide) => (
        <div class="slide absolute h-fit w-full transition-all duration-[450ms] ease-in-out">
          {slide.type === "video" ? (
            <Video
              src={slide.src}
              classes="aspect-[7/4] object-cover w-full !m-0 !border-none !shadow-none rounded-none"
            />
          ) : (
            <Image
              src={slide.src}
              alt={slide.alt}
              classes="aspect-[7/4] object-cover w-full !m-0 !border-none !shadow-none rounded-none"
            />
          )}
        </div>
      ))
    }
  </div>
</div>

<script>
  const carousels: NodeListOf<HTMLElement> =
    document.querySelectorAll(".carousel");

  carousels?.forEach((carousel) => {
    const slides: NodeListOf<HTMLElement> = carousel.querySelectorAll(".slide");

    slides.forEach(
      (slide, indx) => (slide.style.transform = `translateX(${indx * 100}%)`)
    );

    let curSlide = 0;

    const prevSlideBtn = carousel.querySelector(
      ".btn-prev"
    ) as HTMLButtonElement;
    const nextSlideBtn = carousel.querySelector(
      ".btn-next"
    ) as HTMLButtonElement;

    prevSlideBtn?.addEventListener("click", function () {
      curSlide--;

      if (nextSlideBtn && nextSlideBtn.disabled) {
        nextSlideBtn.disabled = false;
        nextSlideBtn.ariaHidden = 'false';
        nextSlideBtn.style.opacity = "100%";
      }

      if (curSlide === 0) {
        prevSlideBtn.disabled = true;
        prevSlideBtn.ariaHidden = 'true';
        prevSlideBtn.style.opacity = "0%";
      }

      slides.forEach((slide, indx) => {
        slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;
      });
    });

    nextSlideBtn?.addEventListener("click", function () {
      curSlide++;

      if (prevSlideBtn && prevSlideBtn.disabled) {
        prevSlideBtn.disabled = false;
        prevSlideBtn.ariaHidden = 'false';
        prevSlideBtn.style.opacity = "100%";
      }

      if (curSlide === slides.length - 1) {
        nextSlideBtn.disabled = true;
        nextSlideBtn.ariaHidden = 'true';
        nextSlideBtn.style.opacity = "0%";
      }

      slides.forEach((slide, indx) => {
        slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;
      });
    });
  });
</script>

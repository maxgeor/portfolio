---
// File: src/components/Header.astro
---

<header class="grid grid-cols-12 col-span-full gap-4 uppercase fixed top-1.5 left-2 right-2 z-[1001] mix-blend-difference">
  <div class="col-span-full grid grid-cols-12 gap-4">
    <a href="/" class="col-span-6 md:col-span-4 whitespace-nowrap uppercase p-2 -m-2 w-fit text-white">
      <span class="hidden sm:inline">Max Kevin Crapper Georgopoulos</span>
      <span class="sm:hidden">Max KC Georgopoulos</span>
    </a>
    <a href="/" class="whitespace-nowrap hidden md:block col-span-1 p-2 -m-2 text-white">Work</a>
    <a href="/about" class="whitespace-nowrap hidden md:block col-span-1 p-2 -m-2 text-white">About</a>
    <a href="/writing" class="whitespace-nowrap hidden md:block col-span-1 p-2 -m-2 text-white">Writing</a>
    <a href="mailto:max123358@gmail.com" class="whitespace-nowrap hidden md:block col-span-1 p-2 -m-2 text-white">Contact</a>
    <button id="theme-toggle" class="theme-toggle md:col-start-11 col-span-2 w-fit text-white flex md:justify-self-end group uppercase p-2 -m-2">
      Light/Dark
    </button>
    <button id="menu-toggle" class="justify-self-end w-fit md:hidden uppercase text-right col-start-11 col-span-2 p-4 -m-4 text-white">Menu</button>
  </div>
</header>

<div id="full-screen-menu" class="fixed inset-0 z-[1000] hidden md:hidden flex-col p-2 overflow-hidden bg-white/[92%] dark:bg-black/[92%] opacity-0 scale-[1.02] -translate-y-1 -container">
  <nav class="border-current divide-current border-y-[0.5px] divide-y-[0.5px] text-[34px] leading-[32px] flex flex-col mt-[42px] uppercase font-bold [&>*]:-my-0.5 [&>*]:py-4 [&>*]:px-2 -mx-2">
    <a href="/" class="">Work</a>
    <a href="/about" class="">About</a>
    <a href="/writing" class="">Writing</a>
    <a href="mailto:max123358@gmail.com" class="">Contact</a>
  </nav>
</div>

<style>
  body {
    padding-right: calc(100vw - 100%);
  }

  body.overflow-hidden {
    overflow: hidden !important;
  }

  #full-screen-menu {
    transform-origin: center center;
  }
  
  header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    backdrop-filter: invert(1);
    z-index: -1;
    transition: opacity 0.3s ease;
    opacity: 0;
  }

  @media (orientation: portrait), (orientation: landscape) {
    header {
      mix-blend-mode: difference;
    }
  }
</style>

<script>
  const themeToggle = document.getElementById('theme-toggle') as HTMLButtonElement;
  const menuToggle = document.getElementById('menu-toggle') as HTMLButtonElement;
  const fullScreenMenu = document.getElementById('full-screen-menu') as HTMLDivElement;
  const body = document.body;

  function toggleTheme() {
    const html = document.documentElement;
    const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    html.classList.toggle('dark');
    localStorage.setItem('theme', newTheme);
    updateMetaThemeColor(newTheme);
  }

  function loadThemePreference() {
    const theme = localStorage.getItem('theme') || 'light';
    document.documentElement.classList.toggle('dark', theme === 'dark');
    updateMetaThemeColor(theme);

    // Disable transitions on load
    document.documentElement.classList.add('no-transitions');

    // Enable transitions after a short delay
    setTimeout(() => {
      document.documentElement.classList.remove('no-transitions');
    }, 50);
  }

  function updateMetaThemeColor(theme: string) {
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) {
      metaThemeColor.setAttribute('content', theme === 'dark' ? '#000' : '#fff');
    } else {
      const newMeta = document.createElement('meta');
      newMeta.setAttribute('name', 'theme-color');
      newMeta.setAttribute('content', theme === 'dark' ? '#000' : '#fff');
      document.head.appendChild(newMeta);
    }
  }

  let startX: number, startY: number, startTime: number;
  let lastX: number, lastY: number, lastTime: number;
  let isSwiping = false;
  const accelerationThreshold = 0.06; // Minimum acceleration to trigger dismissal (in pixels/ms^2)

  function closeMenu() {
    fullScreenMenu.classList.add('opacity-0', 'scale-[1.02]', '-translate-y-1');
    fullScreenMenu.style.transition = 'opacity 350ms ease-in-out, transform 350ms ease-in-out, backdrop-filter 350ms ease-in-out, color 350ms ease-in-out';
    setTimeout(() => {
      fullScreenMenu.classList.add('hidden');
      fullScreenMenu.classList.remove('flex');
      fullScreenMenu.style.transition = ''; // Reset to default for next opening
    }, 300);
    menuToggle.textContent = 'Menu';
    body.classList.remove('overflow-hidden');
  }

  function openMenu() {
    fullScreenMenu.classList.remove('hidden');
    fullScreenMenu.classList.add('flex');
    fullScreenMenu.style.transition = 'opacity 200ms ease-in-out, transform 200ms ease-in-out, backdrop-filter 200ms ease-in-out';
    requestAnimationFrame(() => {
      fullScreenMenu.classList.remove('opacity-0', 'scale-[1.02]', '-translate-y-1');
    });
    menuToggle.textContent = 'Close';
    body.classList.add('overflow-hidden');
  }

  themeToggle.addEventListener('click', toggleTheme);

  menuToggle.addEventListener('click', () => {
    if (fullScreenMenu.classList.contains('hidden')) {
      openMenu();
    } else {
      closeMenu();
    }
  });

  fullScreenMenu.addEventListener('click', (e) => {
    if (e.target === fullScreenMenu && !isSwiping) {
      closeMenu();
    }
  });

  fullScreenMenu.addEventListener('touchstart', (e: TouchEvent) => {
    const touch = e.touches[0];
    startX = lastX = touch.clientX;
    startY = lastY = touch.clientY;
    startTime = lastTime = e.timeStamp;
    isSwiping = false;
  });

  fullScreenMenu.addEventListener('touchmove', (e: TouchEvent) => {
    isSwiping = true;
    const touch = e.touches[0];
    const currentTime = e.timeStamp;
    const deltaTime = currentTime - lastTime;
    
    if (deltaTime > 0) {
      const deltaX = touch.clientX - lastX;
      const deltaY = touch.clientY - lastY;
      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      const velocity = distance / deltaTime;
      const acceleration = velocity / deltaTime;

      if (acceleration > accelerationThreshold) {
        closeMenu();
      }
    }

    lastX = touch.clientX;
    lastY = touch.clientY;
    lastTime = currentTime;
  });

  fullScreenMenu.addEventListener('touchend', () => {
    isSwiping = false;
  });

  // Handle orientation changes
  window.addEventListener('orientationchange', () => {
    // Force a reflow to ensure the mix-blend-mode is applied correctly
    document.body.style.display = 'none';
    requestAnimationFrame(() => {
      document.body.style.display = '';
    });
  });

  document.addEventListener('DOMContentLoaded', loadThemePreference);
</script>
---
import ResponsiveImage from './ResponsiveImage.astro';
import ExternalLinkArrow from './icons/ExternalLinkArrow.astro';
import ScrollingBanner from './ScrollingBanner.astro'

type Work = {
  title: string;
  description: string;
  roles: string[];
  link?: {
    href: string;
    target?: '_blank' | '_self';
  };
  year: string;
  image: {
    src: string;
    previewSrc: string;
    alt: string;
    width: string;
    height: string;
  };
  type: string;
  isHidden?: boolean;
  studySlug?: string;
  isPrivate?: boolean;
  isComingSoon?: boolean;
  isArchived?: boolean;
  classes?: string;
}

export interface Props extends Work {
  attributes?: Record<string, string | null>;
}

const { 
  title, 
  description, 
  type,
  image,
  year,
  link = {
    href: null,
    target: '_self',
  },
  roles,
  isHidden = true,
  studySlug,
  isPrivate = false,
  classes = '',
  isComingSoon = false,
  isArchived = false,
  attributes = {},
} = Astro.props;

const shouldDisable = isComingSoon || isPrivate || isArchived;

const Element = shouldDisable ? 'div' : 'a';
const props = shouldDisable
    ? {} 
    : studySlug 
      ? { href: `/study/${studySlug}`, target: '_self' } 
      : link
---
<Element
  {...props}
  {...attributes}
  class={`
    xs:col-span-6 md:col-span-4 xl:col-span-3 work-card relative group col-span-full text-pretty hover:bg-transparent !hover:opacity-1 !focus:opacity-1 -mx-2 transition-opacity duration-200
    ${shouldDisable ? 'disabled cursor-not-allowed' : 'cursor-pointer'}
    ${!isHidden && 'active'}
    ${classes}
  `}
>
  <div class='flex flex-col gap-2  h-full overflow-hidden'>
    <picture class={`work-card-picture relative h-auto !group-focus:opacity-100 duration-300`}>
      <div class="absolute z-10 inset-0 shadow-[inset_0_0.5px_0_rgba(0,0,0,0.09),_inset_0_-0.5px_0_rgba(0,0,0,0.09)] pointer-events-none"></div>
      <ResponsiveImage {...image} transitionDelay={0} />
      {isArchived && <ScrollingBanner title='Archive' classes="-rotate-[12deg]" />}
      {isComingSoon && <ScrollingBanner title='Soon' classes="-rotate-[12deg]" />}
      {isPrivate && <ScrollingBanner title='Private' classes="-rotate-[12deg]" />}
    </picture> 
    <div class="uppercase work-card-content flex flex-col duration-300 -my-0.5 mx-2">
      <div>
        <h2 class="flex shrink-0 whitespace-nowrap">
          {title}
          {link.href && link.target === '_blank' && !shouldDisable && !studySlug && (
            <ExternalLinkArrow classes="-ml-px shrink-0" />
          )}
        </h2>
        <p class="">{description}</p>
      </div>
      <div class="">
        <p>{roles.join(', ')}</p>
        <p class="">{type}</p>
        <p>{year}</p>
      </div>
    </div>
  </div>
</Element>

<style>
  .work-card.disabled .work-card-content {
    opacity: 0.4;
  }
  .work-card.disabled.active .work-card-content {
    opacity: 1;
  }

  .work-card .work-card-picture {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .work-card.active .work-card-picture {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const workCards = document.querySelectorAll('.work-card');
    const isMobileOrTabletDevice = isMobileOrTablet();

    function isMobileOrTablet() {
      const userAgent = navigator.userAgent.toLowerCase();
      const mobileKeywords = [
        'android', 'webos', 'iphone', 'ipad', 'ipod', 'blackberry', 'windows phone'
      ];
      
      const isMobile = mobileKeywords.some(keyword => userAgent.includes(keyword));
      const isTablet = /tablet|ipad|playbook|silk|(android(?!.*mobile))/i.test(userAgent);
      
      return isMobile || isTablet;
    }

    const observerOptions = {
      root: null,
      rootMargin: '-30% 0px -15% 0px', // This creates the middle 80% zone
      threshold: 0 // We only need to know when it enters or leaves the zone
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('active');
        } else {
          entry.target.classList.remove('active');
        }
      });
    }, observerOptions);

    if (isMobileOrTabletDevice) {
      workCards.forEach(card => {
        observer.observe(card);
      });
    } else {
      workCards.forEach(card => {
        let timer;

        card.addEventListener('mouseenter', () => {
          card.classList.add('active');

          clearTimeout(timer);
          timer = setTimeout(() => {
            card.classList.remove('active');
          }, 4400);
        });
      });
    }

    // Cleanup function
    return () => {
      if (isMobileOrTabletDevice) {
        workCards.forEach(card => {
          observer.unobserve(card);
        });
      }
    };
  });
</script>
---
import ResponsiveImage from './ResponsiveImage.astro';
import ExternalLinkArrow from './icons/ExternalLinkArrow.astro';
import ScrollingBanner from './ScrollingBanner.astro'

type Work = {
  title: string;
  description: string;
  roles: string[];
  link?: {
    href: string;
    target?: '_blank' | '_self';
  };
  year: string;
  image: {
    src: string;
    previewSrc: string;
    alt: string;
    width: string;
    height: string;
  };
  type: string;
  isHidden?: boolean;
  studySlug?: string;
  isPrivate?: boolean;
  isComingSoon?: boolean;
  isArchived?: boolean;
  classes?: string;
}

export interface Props extends Work {
  attributes?: Record<string, string | null>;
}

const { 
  title, 
  description, 
  type,
  image,
  year,
  link = {
    href: null,
    target: '_self',
  },
  roles,
  isHidden = true,
  studySlug,
  isPrivate = false,
  classes = '',
  isComingSoon = false,
  isArchived = false,
  attributes = {},
} = Astro.props;

const shouldDisable = isComingSoon || isPrivate || isArchived;

const Element = shouldDisable ? 'div' : 'a';
const props = shouldDisable
    ? {} 
    : studySlug 
      ? { href: `/study/${studySlug}`, target: '_self' } 
      : link
---
<Element
  {...props}
  {...attributes}
  class={`
    xs:col-span-6 md:col-span-4 xl:col-span-3 work-card relative group col-span-full text-pretty hover:bg-transparent !hover:opacity-1 !focus:opacity-1 -mx-2 transition-opacity duration-200
    ${shouldDisable ? 'disabled cursor-not-allowed' : 'cursor-pointer'}
    ${!isHidden && 'active'}
    ${classes}
  `}
>
  <div class='flex flex-col gap-2  h-full overflow-hidden'>
    <picture class={`work-card-picture relative h-auto !group-focus:opacity-100 duration-300`}>
      <div class="absolute z-10 inset-0 shadow-[inset_0_0.5px_0_rgba(0,0,0,0.09),_inset_0_-0.5px_0_rgba(0,0,0,0.09)] pointer-events-none"></div>
      <ResponsiveImage {...image} transitionDelay={0} />
      {isArchived && <ScrollingBanner title='Archive' classes="-rotate-[12deg]" />}
      {isComingSoon && <ScrollingBanner title='Soon' classes="-rotate-[12deg]" />}
      {isPrivate && <ScrollingBanner title='Private' classes="-rotate-[12deg]" />}
    </picture> 
    <div class="uppercase work-card-content flex flex-col duration-300 -my-0.5 mx-2">
      <div>
        <h2 class="flex shrink-0 whitespace-nowrap">
          {title}
          {link.href && link.target === '_blank' && !shouldDisable && !studySlug && (
            <ExternalLinkArrow classes="-ml-px shrink-0" />
          )}
        </h2>
        <p class="">{description}</p>
      </div>
      <div class="">
        <p>{roles.join(', ')}</p>
        <p class="">{type}</p>
        <p>{year}</p>
      </div>
    </div>
  </div>
</Element>

<style>
  .work-card.disabled .work-card-content {
    opacity: 0.4;
  }
  .work-card.disabled.active .work-card-content {
    opacity: 1;
  }

  .work-card .work-card-picture {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .work-card.active .work-card-picture {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const workCards = document.querySelectorAll('.work-card');
    const isMobileOrTabletDevice = isMobileOrTablet();

    function isMobileOrTablet() {
      let check = false;
      (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || (window as any).opera);
      return check;
    }

    const observerOptions = {
      root: null,
      rootMargin: '-25% 0px -12% 0px', // This creates the middle 80% zone
      threshold: 0 // We only need to know when it enters or leaves the zone
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('active');
        } else {
          entry.target.classList.remove('active');
        }
      });
    }, observerOptions);

    if (isMobileOrTabletDevice) {
      workCards.forEach(card => {
        observer.observe(card);
      });
    } else {
      workCards.forEach(card => {
        let timer;

        card.addEventListener('mouseenter', () => {
          card.classList.add('active');

          clearTimeout(timer);
          timer = setTimeout(() => {
            card.classList.remove('active');
          }, 4400);
        });
      });
    }

    // Cleanup function
    return () => {
      if (isMobileOrTabletDevice) {
        workCards.forEach(card => {
          observer.unobserve(card);
        });
      }
    };
  });
</script>
---
import CategoryChip from './CategoryChip.astro';
import RightArrowIcon from './icons/RightArrowIcon.astro';
import UpRightArrowIcon from './icons/UpRightArrowIcon.astro';
import ScrollingBanner from './ScrollingBanner.astro'
import { categories } from '../lib/categories.ts';

type Roles = {
  long: string[],
  short: string[];
}

type Work = {
  title: string;
  description: string;
  roles: Roles;
  link?: {
    href: string;
    target?: '_blank' | '_self';
  };
  year: string;
  image: string;
  type: string;
  studySlug?: string;
  isPrivate?: boolean;
  isComingSoon?: boolean;
  classes?: string;
}

const { 
  title, 
  description, 
  type,
  image,
  year,
  link = {
    href: null,
    target: '_blank',
  },
  roles,
  studySlug,
  isPrivate = false,
  classes = '',
  isComingSoon = false,
} = Astro.props;

const Element = isComingSoon ? 'div' : 'a';
const props = 
  isComingSoon || isPrivate
    ? {} 
    : studySlug 
      ? { href: `study/${studySlug}`, target: '_self' } 
      : link 
---
<Element
  {...props}
  class={`
    work-card bg-neutral-100 dark:bg-neutral-900 p-15  relative group col-span-full h-fit xs:col-span-4 lg:col-span-2 hover:bg-transparent
    ${isComingSoon || isPrivate ? 'disabled cursor-not-allowed' : 'cursor-pointer'}
    ${classes}
  `}
>
  <div class='overflow-hidden flex flex-col gap-15 h-full'>
    <div class="work-card-content transition-all duration-300">
      <div class="flex justify-between gap-5">
        <h2 class="uppercase shrink-0 whitespace-nowrap">
          {title}
        </h2>
        <div class="relative flex items-center gap-5 ">
          <div class="flex">
            {studySlug && <CategoryChip category="case-study" />}
            {type === "client" && <CategoryChip category="client" />} 
            {type === "project" && <CategoryChip category="project" />} 
          </div>
          <span class="truncate">
            {isPrivate ? (
              "Private"
            ) : isComingSoon ? (
              "Soon"
            ) : studySlug ? (
              <RightArrowIcon classes="-mr-[3px]" />
            ) : (
              <UpRightArrowIcon classes="-mr-[4px]" />
            )}
          </span>
        </div>
      </div>
      <p>{description}</p>
      <p>{roles.long.join(', ')}</p>
      <p class="capitalize">{type}</p>
      <p>{year}</p>
    </div>
    <picture class={`work-card-picture relative h-auto group-focus:opacity-100  transition-all duration-300`}>
      <img
        src={image}
        alt={`Preview mockup of ${title}`}
        class={`
          w-full h-full object-top select-none object-contain 
        `}
      />
      {isComingSoon && <ScrollingBanner title='Soon' classes="-rotate-[12deg]" />}
      {isPrivate && <ScrollingBanner title='Private' classes="-rotate-[12deg]" />}
    </picture> 
  </div>
</Element>

<!-- <style>
  .work-card.disabled .work-card-content {
    opacity: 0.4;
  }
  .work-card.disabled.active .work-card-content {
    opacity: 1;
  }

  .work-card .work-card-picture {
    opacity: 0;
  }

  .work-card.active .work-card-picture {
    opacity: 1;
  }
</style> -->

<!-- <script>
  document.addEventListener('DOMContentLoaded', function() {
    const workCards = document.querySelectorAll('.work-card');

    const showIntersectingCards = (cards) => {
      cards.forEach(card => {
        const rect = card.getBoundingClientRect();
        const middleOfScreen = window.innerHeight / 2;
        const cardMiddle = rect.top + (rect.height / 2);

        if (cardMiddle > (middleOfScreen - (middleOfScreen * 0.8)) &&
          cardMiddle < (middleOfScreen + (middleOfScreen * 0.8))) {
          card.classList.add('active');
        } else {
          card.classList.remove('active');
        }
      });
    }

    if (window.innerWidth >= 1040) {
      workCards.forEach(card => {
        let timer;

        card.addEventListener('mouseenter', () => {
          card.classList.add('active');

          clearTimeout(timer);
          timer = setTimeout(() => {
            card.classList.remove('active');
          }, 3000);
        });
      });
    }

    if (window.innerWidth < 1040) {
      showIntersectingCards(workCards);
      window.addEventListener('scroll', () => {
        showIntersectingCards(workCards);
      });
    }
  });
</script> -->
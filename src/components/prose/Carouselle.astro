---
import Image from './Image.astro'
import Caption from './Caption.astro';

export interface Props {
  images?: {
    src: string;
    alt: string;
  }[];
}
const { images } = Astro.props;
---

<div class="carouselle relative pb-2">
  <button class="btn-prev hidden group absolute top-[calc(50%-8px)] sm:top-1/2 transform -translate-y-1/2 -left-6 py-14 px-2 z-20 ">
    <div class="shrink-0 w-fit  group-hover:bg-gray-50 group-active:scale-[97%] transition duration-75 p-2 rounded-full bg-white shadow-sm border border-[#E2E7EC]">
      <svg class="shrink-0" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M8.84182 3.13514C9.04327 3.32401 9.05348 3.64042 8.86462 3.84188L5.43521 7.49991L8.86462 11.1579C9.05348 11.3594 9.04327 11.6758 8.84182 11.8647C8.64036 12.0535 8.32394 12.0433 8.13508 11.8419L4.38508 7.84188C4.20477 7.64955 4.20477 7.35027 4.38508 7.15794L8.13508 3.15794C8.32394 2.95648 8.64036 2.94628 8.84182 3.13514Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
    </div>
  </button>
  <button class="btn-next group absolute top-[calc(50%-8px)] sm:top-1/2 transform -translate-y-1/2 -right-6 py-14 px-2 z-20 ">
    <div class="shrink-0 w-fit  group-hover:bg-gray-50 group-active:scale-[97%] transition duration-75 p-2 rounded-full bg-white shadow-sm border border-[#E2E7EC]">
      <svg class="shrink-0" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
    </div>
  </button>
  <div class="flex flex-col items-center gap-3 sm:gap-4">
    <div class="relative aspect-[7/4] w-full overflow-hidden border border-[#EFF1F6] border-b-gray-200 rounded-sm">
      {images?.map(image => (
        <div class="slide absolute overflow-visible transition-all duration-[450ms] ease-in-out w-full h-fit">
          <Image classes={`aspect-[7/4] object-cover w-full `} src={image.src} alt={image.alt || ''} />
        </div>
      ))}
    </div>
    <div class="relative w-full">
      {images?.map((image) => <Caption text={image.alt || ''} classes='absolute top-0  left-1/2 transform -translate-x-1/2 w-full' />)}
    </div>
  </div>
</div>

<script>
  const carsouselles: NodeListOf<HTMLElement> = document.querySelectorAll(".carouselle");

  carsouselles?.forEach((carsouselle) => {
    const slides: NodeListOf<HTMLElement> = carsouselle.querySelectorAll(".slide");
    const captions: NodeListOf<HTMLElement> = carsouselle.querySelectorAll(".caption");
  
    slides.forEach((slide, indx) => {
      slide.style.transform = `translateX(${indx * 100}%)`;
    });
  
    captions.forEach((caption, indx) => {
      if (indx === 0) return;
      caption.style.opacity = '0%';
    });

    let curSlide = 0;

    const prevSlide: HTMLButtonElement | null = carsouselle.querySelector(".btn-prev");
    const nextSlide: HTMLButtonElement | null = carsouselle.querySelector(".btn-next");

    prevSlide?.addEventListener("click", function () {
      curSlide--;

      if (nextSlide && (!nextSlide.style.display || nextSlide.style.display === 'none')) {
        nextSlide.style.display = 'block';
      }

      if (curSlide === 0) {
        prevSlide.style.display = 'none';
        nextSlide?.focus();
      }
  
      slides.forEach((slide, indx) => {
        slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;
      });
      
      captions?.forEach((caption, indx) => {
        if (indx === curSlide) {
          caption.style.opacity = '100%';
        } else {
          caption.style.opacity = '0%';
        }
      });
    });

    nextSlide?.addEventListener("click", function () {
      curSlide++;

      if (prevSlide && (!prevSlide.style.display || prevSlide.style.display === 'none')) {
        prevSlide.style.display = 'block';
      }

      if (curSlide === slides.length -1) {
        nextSlide.style.display = 'none';
        prevSlide?.focus();
      }
    
      slides.forEach((slide, indx) => {
        slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;
      });
    
      captions.forEach((caption, indx) => {
        if (indx === curSlide) {
          caption.style.opacity = '100%';
        } else {
          caption.style.opacity = '0%';
        }
      });
    });
  });
</script>
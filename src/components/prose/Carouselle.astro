---
import Image from "./Image.astro";
import Caption from "./Caption.astro";
import ChevronLeftIcon from "../icons/ChevronLeftIcon.astro";
import ChevronRightIcon from "../icons/ChevronRightIcon.astro";

export interface Props {
  images: {
    src: string;
    alt: string;
  }[];
}
const { images } = Astro.props;
---

<div class="carouselle relative col-span-full py-2 xl:col-start-2 xl:col-end-8">
  <button
    disabled
    class="btn-prev group absolute top-[calc(50%-8px)] -left-6 z-20 -translate-y-1/2 transform py-14 px-2 opacity-0 transition-opacity duration-200 sm:top-1/2"
  >
    <div
      class="w-fit shrink-0 rounded-full bg-white p-2 shadow-[0_1px_2px_0_rgb(0,0,0,0.07)] dark:shadow-[0_1px_2px_0_rgb(0,0,0,0.9)] ring-1 ring-gray-900/[8.5%] transition duration-100 group-active:scale-[97%] group-active:bg-gray-50 dark:bg-[#1A2023] dark:text-white dark:ring-[#F3F9FC]/[20%] dark:active:bg-[#272b2d] lg:group-hover:bg-gray-50 dark:lg:group-hover:bg-[#272b2d]"
    >
      <ChevronLeftIcon classes="shrink-0" />
    </div>
  </button>
  <button
    class="btn-next group absolute top-[calc(50%-8px)] -right-6 z-20 -translate-y-1/2 transform py-14 px-2 transition-opacity duration-200 sm:top-1/2"
  >
    <div
      class="w-fit shrink-0 rounded-full bg-white p-2 shadow-[0_1px_2px_0_rgb(0,0,0,0.07)] dark:shadow-[0_1px_2px_0_rgb(0,0,0,0.9)] ring-1 ring-gray-900/[8.5%] transition duration-100 group-active:scale-[97%] group-active:bg-gray-50 dark:bg-[#1A2023] dark:text-white dark:ring-[#F3F9FC]/[20%] dark:active:bg-[#272b2d] lg:group-hover:bg-gray-50 dark:lg:group-hover:bg-[#272b2d]"
    >
      <ChevronRightIcon classes="shrink-0" />
    </div>
  </button>
  <div class="flex flex-col items-center gap-4">
    <div
      class="relative aspect-[7/4] w-full overflow-hidden rounded-lg border border-[#eeeff1] border-b-gray-200"
    >
      {
        images?.map((image) => (
          <div class="slide absolute h-fit w-full overflow-visible transition-all duration-[450ms] ease-in-out">
            <Image
              src={image.src}
              alt={image.alt}
              hasCaptions={false}
              classes="aspect-[7/4] object-cover w-full !m-0 !border-none"
            />
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  const carsouselles: NodeListOf<HTMLElement> =
    document.querySelectorAll(".carouselle");

  carsouselles?.forEach((carsouselle) => {
    const slides: NodeListOf<HTMLElement> =
      carsouselle.querySelectorAll(".slide");
    const captions: NodeListOf<HTMLElement> =
      carsouselle.querySelectorAll(".caption");

    slides.forEach((slide, indx) => {
      slide.style.transform = `translateX(${indx * 100}%)`;
    });

    captions.forEach((caption, indx) => {
      if (indx === 0) return;
      caption.style.opacity = "0%";
    });

    let curSlide = 0;

    const prevSlide: HTMLButtonElement | null =
      carsouselle.querySelector(".btn-prev");
    const nextSlide: HTMLButtonElement | null =
      carsouselle.querySelector(".btn-next");

    prevSlide?.addEventListener("click", function () {
      curSlide--;

      if (nextSlide) {
        if (nextSlide.disabled) {
          nextSlide.disabled = false;
          nextSlide.style.opacity = "100%";
        }

        if (curSlide === 0) {
          prevSlide.disabled = true;
          prevSlide.style.opacity = "0%";
        }
      }

      slides.forEach((slide, indx) => {
        slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;
      });

      captions?.forEach((caption, indx) => {
        if (indx === curSlide) {
          caption.style.opacity = "100%";
        } else {
          caption.style.opacity = "0%";
        }
      });
    });

    nextSlide?.addEventListener("click", function () {
      curSlide++;

      if (prevSlide) {
        if (prevSlide.disabled) {
          prevSlide.disabled = false;
          prevSlide.style.opacity = "100%";
        }

        if (curSlide === slides.length - 1) {
          nextSlide.disabled = true;
          nextSlide.style.opacity = "0%";
        }
      }

      slides.forEach((slide, indx) => {
        slide.style.transform = `translateX(${100 * (indx - curSlide)}%)`;
      });

      captions?.forEach((caption, indx) => {
        if (indx === curSlide) {
          caption.style.opacity = "100%";
        } else {
          caption.style.opacity = "0%";
        }
      });
    });
  });
</script>

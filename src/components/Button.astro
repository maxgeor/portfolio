---
export type Buttonable = {
  padding?: string;
  invisiblePadding?: string;
  hasOutline?: boolean;
  ariaLabel?: string;
  ariaHidden?: 'true' | 'false' | undefined;
  classes?: string;
};

interface Button extends Buttonable {
  tag?: "button";
  id?: string;
  disabled?: boolean;
}

interface Link extends Buttonable {
  tag: "a";
  href: string;
  id?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
}

export type Props = Button | Link;

const {
  tag: Element = "button",
  hasOutline = true,
  padding = "p-2",
  classes = "",
  ariaHidden = 'false',
  invisiblePadding,
  ariaLabel,
  ...props
} = Astro.props;

const defaultClasses = `${
  hasOutline &&
  `shadow-outline-dark hover:shadow-outline-dark group-hover:shadow-outline-dark`
} ${
  !invisiblePadding && 
  "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-yellow !focus-visible:ring-offset-0"
} ${padding} flex items-center gap-2 bg-neutral-800 hover:bg-neutral-710 group-hover:bg-neutral-710 text-neutral-50 !rounded-full transition ease-in-out w-fit transform`;
---

<Element
  aria-label={ariaLabel}
  aria-hidden={ariaHidden}
  class={`
    button 
    ${
      invisiblePadding
        ? `group !outline-none ${invisiblePadding}`
        : defaultClasses
    }
    ${classes}
  `}
  {...props}
>
  {
    invisiblePadding ? (
      <div class={defaultClasses}>
        <slot />
      </div>
    ) : (
      <slot />
    )
  }
</Element>

<style>
  .button.group:focus-visible {
    outline: none;
  }

  .button.group:focus-visible div {
    box-shadow: 0 0 0 2px #ffff00;
  }
</style>

---
export type Buttonable = {
  padding?: string;
  invisiblePadding?: string;
  hasBackground?: boolean;
  ariaLabel?: string;
  classes?: string;
};

interface Button extends Buttonable {
  tag?: "button";
  id?: string;
  disabled?: boolean;
};

interface Link extends Buttonable {
  tag: "a";
  href: string;
  id?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
};

export type Props = Button | Link;

const {
  tag: Element = "button",
  hasBackground = true,
  padding = "p-2",
  classes = "",
  invisiblePadding,
  ariaLabel,
  ...props
} = Astro.props;

const actionClasses = invisiblePadding
  ? "group-hover:bg-neutral-100 dark:group-hover:bg-[#383838] group-active:bg-neutral-100 dark:group-active:bg-[#383838]"
  : "hover:bg-neutral-100 dark:hover:bg-[#383838] active:bg-neutral-100 dark:active:bg-[#383838] outline-none focus:outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-green";

const defaultClasses = `${
  hasBackground &&
  `shadow-outline dark:shadow-outline-dark`
} ${padding} flex items-center gap-2 bg-white dark:bg-neutral-800 ${actionClasses} text-neutral-950 dark:text-neutral-100 !rounded-full  transition ease-in-out w-fit transform`;
---

<Element
  aria-label={ariaLabel}
  data-has-invisible-padding={invisiblePadding ? "true" : "false"}
  class={`
    button 
    ${invisiblePadding ? `group !outline-none ${invisiblePadding}` : defaultClasses}
    ${classes}
  `}
  {...props}
>
  {
    invisiblePadding ? (
      <div class={defaultClasses}>
        <slot />
      </div>
    ) : (
      <slot />
    )
  }
</Element>

<style>
  .button.group:focus-visible {
    outline: none;
  }

  .button.group:focus-visible div {
    box-shadow: 0 0 0 2px #00A200;
  }
</style>

---
export type Buttonable = {
  padding?: string;
  invisiblePadding?: string;
  hasBackground?: boolean;
  ariaLabel?: string;
  classes?: string;
};

interface Button extends Buttonable {
  tag?: "button";
  id?: string;
  disabled?: boolean;
}

interface Link extends Buttonable {
  tag: "a";
  href: string;
  id?: string;
  target?: "_blank" | "_self" | "_parent" | "_top";
}

export type Props = Button | Link;

const {
  tag: Element = "button",
  padding = "p-2",
  invisiblePadding,
  hasBackground = true,
  ariaLabel = "",
  classes = "",
  ...props
} = Astro.props;

const actionClasses = invisiblePadding
  ? "group-hover:bg-gray-100 dark:group-hover:bg-neutral-675 group-active:bg-gray-100 dark:group-active:bg-neutral-675"
  : "hover:bg-gray-100 dark:hover:bg-neutral-675 active:bg-gray-100 dark:active:bg-neutral-675";

const defaultClasses = `${
  hasBackground &&
  `bg-white dark:bg-neutral-700 shadow dark:shadow-dark ${actionClasses}`
} ${padding} flex items-center gap-2 text-gray-950 dark:text-neutral-100 rounded-full transition ease-in-out w-fit`;
---

<Element
  aria-label={ariaLabel}
  class={`
    ${invisiblePadding ? `group ${invisiblePadding}` : defaultClasses}
    ${classes}
  `}
  {...props}
>
  {
    invisiblePadding ? (
      <div class={defaultClasses}>
        <slot />
      </div>
    ) : (
      <slot />
    )
  }
</Element>

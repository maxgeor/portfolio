---
import clsx from 'clsx';

export interface Props {
  classes?: string;
}

const { classes = "" } = Astro.props;
---
<button id="theme-toggle" class={clsx(
  "theme-toggle flex md:justify-self-end group uppercase p-2 -m-2",
  classes
)}>
  Light/Dark
</button>

<script>
  const themeToggle = document.getElementById('theme-toggle');

  function toggleTheme() {
    const html = document.documentElement;
    const currentTheme = html.classList.contains('dark') ? 'dark' : 'light';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    
    html.classList.toggle('dark');
    localStorage.setItem('theme', newTheme);
    updateMetaThemeColor(newTheme);
  }

  function loadThemePreference() {
    const theme = localStorage.getItem('theme') || 'light';
    document.documentElement.classList.toggle('dark', theme === 'dark');
    updateMetaThemeColor(theme);

    // Disable transitions on load
    document.documentElement.classList.add('no-transitions');

    // Enable transitions after a short delay
    setTimeout(() => {
      document.documentElement.classList.remove('no-transitions');
    }, 50);
  }

  function updateMetaThemeColor(theme) {
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) {
      metaThemeColor.content = theme === 'dark' ? '#000' : '#fff';
    } else {
      const newMeta = document.createElement('meta');
      newMeta.name = 'theme-color';
      newMeta.content = theme === 'dark' ? '#000' : '#fff';
      document.head.appendChild(newMeta);
    }
  }

  themeToggle.addEventListener('click', toggleTheme);
  document.addEventListener('DOMContentLoaded', loadThemePreference);
</script>
---
import clsx from 'clsx';

export interface Props {
  classes?: string;
}

const { classes = "" } = Astro.props;
---
<button class={clsx(
  "theme-toggle flex md:justify-self-end group uppercase p-2 -m-2",
  classes
)}>
  Light/Dark
</button>

<script>
  const themeToggles = document.querySelectorAll('.theme-toggle');

  function toggleTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const newTheme = isDark ? 'light' : 'dark';
    
    // Add transition class to body
    document.body.classList.add('theme-transition');
    
    requestAnimationFrame(() => {
      document.documentElement.classList.toggle('dark');
      localStorage.setItem('theme', newTheme);
      updateMetaThemeColor(newTheme);
      
      // Remove transition class after transition is complete
      setTimeout(() => {
        document.body.classList.remove('theme-transition');
      }, 300);
    });
  }

  function loadThemePreference() {
    const theme = localStorage.getItem('theme') || 'light';
    document.documentElement.classList.toggle('dark', theme === 'dark');
    updateMetaThemeColor(theme);
  }

  function updateMetaThemeColor(theme) {
    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    if (metaThemeColor) {
      metaThemeColor.content = theme === 'dark' ? '#000' : '#fff';
    } else {
      const newMeta = document.createElement('meta');
      newMeta.name = 'theme-color';
      newMeta.content = theme === 'dark' ? '#000' : '#fff';
      document.head.appendChild(newMeta);
    }
  }

  themeToggles.forEach(toggle => toggle.addEventListener('click', toggleTheme));
  loadThemePreference();
</script>

<style is:global>
  body.theme-transition {
    transition: background-color 0.3s ease, color 0.3s ease;
  }
</style>
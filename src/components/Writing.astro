---
import RightArrowIcon from './icons/RightArrowIcon.astro';
import { filters } from '../lib/filters.ts';
import { formatDate } from '../utils/formatting';

export interface Props {
  title: string;
  href: string;
  date: string;
  preview: string;
}
const { title, href, date, preview } = Astro.props;

const formattedDate = formatDate(date);
---
<a
  href={href}
  class="writing-card group col-span-full xs:col-span-4 lg:col-span-2 hover:bg-transparent"
>
  <div class="flex items-start justify-between gap-[5px] ">
    <div>
      <h2 class="uppercase shrink-0 whitespace-nowrap">{title}</h2>
      <p>{formattedDate}</p>
    </div>
    <div class="flex items-center gap-[4px] ">
      <span 
        class="shrink-0 border border-white dark:border-black  h-[7px] w-[7px]"
        style={{ backgroundColor: filters["writing"] }}
      ></span>
      <RightArrowIcon classes=" -mr-[2px]" />
    </div>
  </div>
  <div class="writing-card-preview opacity-0 group-focus:opacity-100 !group-hover:opacity-100  duration-300 relative h-[210px] overflow-hidden text-gray-800/40 dark:text-neutral-300/40">
    {preview}
    <div class="absolute inset-0 top-auto h-[75px] bg-gradient-to-t from-white dark:from-black "></div>
  </div>
</a>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const workCards = document.querySelectorAll('.writing-card');

    const showInterdactingCards = (cards) => {
      cards.forEach(card => {
          const picture = card.querySelector('.writing-card-preview');
          const rect = card.getBoundingClientRect();
          const middleOfScreen = window.innerHeight / 2;
          const cardMiddle = rect.top + (rect.height / 2);
  
          if (cardMiddle > (middleOfScreen - (middleOfScreen * 0.8)) &&
              cardMiddle < (middleOfScreen + (middleOfScreen * 0.8))) {
              picture.style.opacity = '1';
              picture.style.textOpacity = '1';
          } else {
              picture.style.opacity = '0';
          }
      });
    }

    if (window.innerWidth >= 1040) {
      workCards.forEach(card => {
        let timer;

        card.addEventListener('mousemove', () => {
            const picture = card.querySelector('.writing-card-preview');
            picture.style.opacity = '1';

            clearTimeout(timer);
            timer = setTimeout(() => {
              picture.style.opacity = '0';
            }, 3000);
        });
      });
    }

    if (window.innerWidth < 1040) {
      showInterdactingCards(workCards);
      window.addEventListener('scroll', () => {
        showInterdactingCards(workCards);
      });
    }
  });
</script>
---
interface Props {
  src: string;
  previewSrc: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  transitionDelay?: number;
}

const { 
  src, 
  previewSrc, 
  alt, 
  width, 
  height, 
  class: className = '',
  transitionDelay = 100
} = Astro.props;

const createImageProps = (src: string, alt: string, width?: number, height?: number) => {
  const props: Record<string, any> = { src, alt };
  if (width) props.width = width;
  if (height) props.height = height;
  return props;
};
---

<div class={`relative overflow-hidden ${className}`} style={width && height ? `aspect-ratio: ${width}/${height}` : undefined}>
  <img
    {...createImageProps(previewSrc, alt, width, height)}
    class="absolute inset-0 w-full h-full object-cover blur-sm select-none transition-opacity duration-300"
    style="opacity: 1;"
    aria-hidden="true"
  />
  <img
    {...createImageProps(src, alt, width, height)}
    class="absolute inset-0 w-full h-full object-cover select-none transition-opacity duration-300"
    style="opacity: 0;"
    loading="lazy"
    data-transition-delay={transitionDelay}
  />
</div>

<script>
  function handleImageLoad(img: HTMLImageElement | null) {
    if (!img) return;

    const prevImg = img.previousElementSibling as HTMLImageElement | null;

    requestAnimationFrame(() => {
      img.style.opacity = '1';
      if (prevImg && prevImg.tagName === 'IMG') {
        prevImg.style.opacity = '0';
      }
    });
  }

  function setupImage(img: HTMLImageElement) {
    if (img.complete && img.naturalWidth !== 0) {
      handleImageLoad(img);
    } else {
      img.addEventListener('load', () => handleImageLoad(img));
    }

    img.addEventListener('error', () => {
      console.error(`Failed to load image: ${img.src}`);
    });
  }

  function setupImages() {
    const images = document.querySelectorAll('img[loading="lazy"]') as NodeListOf<HTMLImageElement>;
    images.forEach(setupImage);
  }

  function safeSetupImages() {
    try {
      setupImages();
    } catch (error) {
      console.error('Error setting up images:', error);
    }
  }

  // Run on initial load
  safeSetupImages();

  // Run on subsequent navigations
  document.addEventListener('astro:page-load', safeSetupImages);

  // Fallback for non-Astro environments
  if ('onload' in window) {
    window.addEventListener('load', safeSetupImages);
  }

  // Run if the page is already loaded
  if (document.readyState === 'complete') {
    safeSetupImages();
  } else {
    document.addEventListener('DOMContentLoaded', safeSetupImages);
  }
</script>
---
import Layout from "./Layout.astro";
import Header from "../components/Header.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import UpRightArrowIcon from "../components/icons/UpRightArrowIcon.astro";
import Button from "../components/Button.astro";
import ExpandableSidebarNav from "../components/study/ExpandableSidebarNav.astro";

const { frontmatter } = Astro.props;
const {
  title,
  tldr,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  teammates,
} = frontmatter;
---

<Layout title={title} description={tldr} maxWidth="max-w-none">
  <main class="relative col-span-full grid grid-cols-8 gap-6 gap-y-12 px-6">
    <Button 
      tag="a" 
      href="#article" 
      padding="px-3 py-1.5"
      classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  px-3.5">Skip to main content</Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[10px] pr-3 py-1.5"
      classes="gap-1 fixed top-6 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[10px] pr-3 py-1.5"
      classes="gap-1 fixed top-6 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Header />
    <section class='col-span-full grid grid-cols-6 xl:grid-cols-8 gap-6'>
      <div class="w-full col-span-full xl:col-span-1 xl:row-span-2 flex xl:flex-col gap-6 xl:justify-between -my-1 xl:mt-0">
        <div class="flex justify-between basis-1/2 xl:basis-auto">
          <h1>
            {link ? (
              <a href='/work' class='group flex items-center hover:bg-white hover:text-black pr-[3px]'>
                <span>
                  <span class="group-hover:opacity-0">[</span>{title}<span class="group-hover:opacity-0">]</span>
                </span>
                <svg class="hidden group-hover:inline-block -ml-1 -mb-0.5" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
                
              </a>
            ) : (
              <p>[{title}]</p>
            )}
          </h1>
        </div>
        <p class="basis-1/2 xl:basis-auto">{year}</p>
      </div>
      <div class="col-span-3 border-t-[0.5px] -mb-1">
        <h2>In short...</h2>
        <p>{tldr}</p>
      </div>
      <div class="col-span-3 border-t-[0.5px] -mb-1">
        <h2>Role</h2>
        <p>{roles.long.join(", ")}</p>
      </div>
      <div class="col-span-3 border-t-[0.5px] -mb-1">
        <h2>Team</h2>
        {teammates?.length > 0 ? (
          <ul class="capitalize">
            {teammates.map((teammate: { name: string, role: string, href: string }) => (
              <li>
                <a 
                  href={teammate.href}
                  target="_blank"
                  class="underline" 
                >
                  {teammate.name}
                </a> 
                ({teammate.role})
              </li>
            ))}
          </ul>
        ) : "â€”"}
      </div>
      <div class="col-span-3 border-t-[0.5px] -mb-1">
        <h2>Tools</h2>
        <p class="capitalize">{tools.join(", ")}</p>
      </div>
    </section>
    <figure class={`
      col-span-full select-none -mx-6
    `}>
      <img
        src={image}
        alt={''}
        class='h-full w-full object-cover'
      />
    </figure>
    <article
      id="article"
      class="w-full mx-auto col-span-full overflow-visible scroll-mt-6"
    >
      <ExpandableSidebarNav sections={sections} />
      <div
        class={`
          text-white w-full  
          prose-p:text-neutral-300
                    
          prose-h1:text-xl sm:prose-h1:text-2xl xl:prose-h1:text-3xl prose-h1:tracking-tighter

          prose-h2:text-lg prose-h2:my-0 prose-h2:tracking-tight 

          prose-h3:text-sm prose-h3:-mb-[16px]

          prose-p:leading-5
          prose-p:max-w-prose 
          prose-p:my-0

          prose-strong:text-white prose-strong:font-normal

          prose-a:underline prose-a:decoration-[0.05em] hover:prose-a:no-underline hover:prose-a:bg-white hover:prose-a:text-black

          prose-code:bg-neutral-700/50 prose-code:ring-1 prose-code:ring-white/[8%] prose-code:ring-inset prose-code:text-[12px] prose-code:leading-5 prose-code:font-mono prose-code:font-normal prose-code:tracking-tight prose-code:whitespace-nowrap prose-code:rounded-[3px] prose-code:py-0.5 prose-code:px-[5px] 

          prose-ul:list-disc prose-ul:max-w-prose prose-ul:pl-[18px]
          prose-ul:my-0 prose-ul:text-neutral-300

          prose-ol:list-inside prose-ol:list-decimal prose-ol:max-w-prose prose-ol:pl-[20px] prose-ol:my-0 prose-ol:text-neutral-300

          prose-li:list-item
          prose-li:list-outside
          prose-li:pl-1
          prose-li:m-0
          prose-li:leading-5
          prose-li:text-neutral-300
          marker:prose-li:text-neutral-300
          marker:prose-li:text-[13.5px]
          marker:prose-li:font-inter
          

          prose-figure:w-auto prose-figure:select-none prose-figure:my-0 prose-figure:-mx-6 sm:prose-figure:-mx-6 xl:prose-figure:mx-0 
          prose-video:w-auto prose-video:select-none	prose-video:my-0 prose-video:-mx-6 sm:prose-video:-mx-6 xl:prose-video:mx-0

          prose-td:p-0

          grid grid-cols-6 xl:grid-cols-8 gap-y-12 gap-x-6 
        `}
      >
        <slot />
      </div>
    </article>
  </main>
</Layout>

<script>
  // window.addEventListener("DOMContentLoaded", () => {
  //   const observer = new IntersectionObserver(
  //     (entries) =>
  //       entries.forEach((entry) => {
  //         const id = entry.target.getAttribute("id");
  //         entry.isIntersecting
  //           ? document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.add("active")
  //           : document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.remove("active");
  //       }),
  //     {
  //       rootMargin: "-290px",
  //     }
  //   );

  //   document
  //     .querySelectorAll('h1[id], h2[id], h3[id]')
  //     .forEach((header) => observer.observe(header));
  // });

  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

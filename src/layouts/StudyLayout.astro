---
import Layout from "./Layout.astro";
import Logo from "../components/Logo.astro";
import Link from "../components/Link.astro";
import Grid from "../components/Grid.astro";
import Header from "../components/Header.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import Button from "../components/Button.astro";

const { frontmatter } = Astro.props;
const {
  title,
  type,
  tldr,
  description,
  roles,
  year,
  link,
  tools,
  teammates,
} = frontmatter;
---

<Layout title={title} description={description} maxWidth="max-w-none">
  <main class="relative col-span-full grid grid-cols-12 gap-4 pb-24">
    <Button 
      tag="a" 
      href="#article" 
      padding="px-3 .5"
      classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  !px-1 !rounded  ">
      Skip to main content
    </Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[10px] pr-3 .5"
      classes="gap-1 fixed top-4 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[64px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[10px] pr-3 .5"
      classes="gap-1 fixed top-4 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[64px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Header />
    <Grid 
      id="sticky-header" 
      classes="hidden transition fixed top-4 left-4 right-4 z-50 mix-blend-difference"
    >
      <a href="/" class="relative group mix-blend-difference col-span-2">
        <p class="absolute group-hover:hidden uppercase">{title}</p>
        <Logo classes="hidden group-hover:flex" />
      </a>
    </Grid>
    <section id="hero" class='col-span-full grid grid-cols-12 gap-x-4 border-b border-neutral-750'>
      <div class="grid grid-cols-12 col-span-full border-b border-neutral-750 gap-x-4 pb-1">
        <h1 class="col-span-6 uppercase">{title}</h1>
        {link && <Link href={link} target='_blank' classes="col-span-6 w-fit">Live Site</Link>}
      </div>
      <div class="hidden xl:flex flex-col justify-between gap-4 col-span-3 xl:col-span-2 py-1 row-span-2">
        <div class="col-span-2">
          <p class="col-span-2 text-balance">{description}</p>
        </div>
        <div class="col-span-2">
          <p>{year}</p>
          <p>{type}</p>
        </div>
      </div>
      <div class="flex flex-col md:grid md:grid-cols-12 xl:grid-cols-10 xl:col-start-3 gap-x-4 col-span-6 md:col-span-full">
        <div class="mb-auto md:mt-0  flex xl:hidden flex-col col-span-3 gap-1 xl:col-span-2 py-1">
          <div class="col-span-2">
            <p class="col-span-2 text-balance">{description}</p>
          </div>
          <div class="flex items-center gap-1.5">
            <p>{year}</p>
            <span class="w-px h-2.5 bg-[#b0b0b0]"></span>
            <p>{type}</p>
          </div>
        </div>
        <div class="col-span-3 xl:col-span-2 border-t md:border-none border-neutral-750 py-1">
          <p class="uppercase">Roles</p>
          <ul class="col-span-3 text-balance">{roles?.join(', ')}</ul>
        </div>
        <div class="col-span-3 xl:col-span-2 border-t md:border-none border-neutral-750 py-1 h-fit">
          <p class="uppercase">Tools</p>
          <p class="col-span-3 text-balance">{tools.join(', ')}</p>
        </div>
        <div class="col-span-3 xl:col-span-2 border-t md:border-none border-neutral-750 py-1 h-min">
          <p class="uppercase">Team</p>
          <div class="text-balance">
            {teammates?.map((teammate: { name: string, role: string, href: string }) => (
              <div>
                <Link classes="w-fit" href={teammate.href} classes="underline">{teammate.name}</Link> ({teammate.role})
              </div>
            )) || "—"}
          </div>
        </div>
      </div>
      <div class="flex flex-col md:grid grid-cols-12 xl:grid-cols-10 xl:col-start-3 gap-x-4 col-span-6  md:col-span-full xl:col-span-10 md:border-t border-neutral-750">
        <div class=" col-start-1 col-end-4 xl:col-end-3 py-1">
          <p class="uppercase">Problem</p>
          <p class="col-span-3 text-balance">{tldr?.problem || "—"}</p>
        </div>
        <div class="col-span-3 xl:col-span-2 border-t md:border-none border-neutral-750 py-1">
          <p class="uppercase">Solution</p>
          <p class="col-span-3 text-balance">{tldr?.solution || "—"}</p>
        </div>
        <div class="col-span-3 xl:col-span-2 border-t md:border-none border-neutral-750 py-1">
          <p class="uppercase">Decisions</p>
          <ul class="col-span-3 text-balance">
            {tldr?.decisions?.map((decision: string, index: number) => 
              <li><span class="tabular">{index + 1}</span>/ {decision}</li>
            ) || "—"}
          </ul>
        </div>
        <div class="col-span-3 xl:col-span-2 border-t md:border-none border-neutral-750 py-1">
          <p class="uppercase">Tradeoffs</p>
          <ul class="col-span-3 text-balance">
            {tldr?.tradeoffs?.map((tradeoff: string, index: number) => 
              <li><span class="tabular">{index + 1}</span>/ {tradeoff}</li>
            ) || "—"}
          </ul>
        </div>
      </div>
    </section>
    
    <article
      id="article"
      class="w-full mx-auto col-span-full overflow-visible scroll-mt-6"
    >
      <div
        class={`
          transition-all prose-a:underline prose-a:decoration-[0.07em] hover:prose-a:no-underline hover:prose-a:bg-neutral-700

          prose-ul:list-disc prose-ul:max-w-prose prose-ul:pl-[18px]
          prose-ul:-my-0.5 prose-ul:text-neutral-300

          prose-ol:list-inside prose-ol:list-decimal prose-ol:max-w-prose prose-ol:pl-[22px] prose-ol:-my-0.5 prose-ol:text-neutral-300

          prose-li:list-item
          prose-li:list-outside
          prose-li:pl-0.5
          prose-li:m-0
          prose-li:leading-4
          marker:prose-li:text-[11.5px]
          marker:prose-li:font-inter
          
          prose-figure:w-auto prose-figure:select-none prose-figure:my-0 
          prose-video:w-auto prose-video:select-none	prose-video:my-0 

          prose-td:p-0

          grid grid-cols-12 gap-x-4 gap-y-12 mt-4
        `}
      >
        <slot />
      </div>
    </article>
    <footer class=" border-neutral-750 pt-12 col-span-full mt-48">
      READ MORE
    </footer>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const hero: HTMLElement | null = document.getElementById('hero');
    const stickyHeader: HTMLElement | null = document.getElementById('sticky-header');

    const callback = (entries: IntersectionObserverEntry[]) => {
      if (!stickyHeader) return;
      
      entries.forEach(entry => {
        if (!entry.isIntersecting) {
          stickyHeader.classList.remove('hidden');
          stickyHeader.classList.add('grid');
        } else {
          stickyHeader.classList.remove('grid');
          stickyHeader.classList.add('hidden');
        }
      });
    };

    const observer = new IntersectionObserver(callback);

    if (hero) {
      observer.observe(hero);
    }
  });

  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[64px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[64px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

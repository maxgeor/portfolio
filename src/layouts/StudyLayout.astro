---
import Layout from "./Layout.astro";
import Link from "../components/Link.astro";
import Header from "../components/Header.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import Button from "../components/Button.astro";
import ExpandableSidebarNav from "../components/study/ExpandableSidebarNav.astro";

const { frontmatter } = Astro.props;
const {
  title,
  type,
  tldr,
  description,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  teammates,
} = frontmatter;
---

<Layout title={title} description={description} maxWidth="max-w-none">
  <main class="relative col-span-full grid grid-cols-8 gap-4 gap-y-16 p-4">
    <Button 
      tag="a" 
      href="#article" 
      padding="px-3 .5"
      classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  !px-1 !rounded  ">Skip to main content</Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[10px] pr-3 .5"
      classes="gap-1 fixed top-4 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[64px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[10px] pr-3 .5"
      classes="gap-1 fixed top-4 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[64px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <section class='col-span-full grid grid-cols-12 gap-4'>
      <div class="col-span-full flex justify-between border-t-[0.5px] border-[#ddd]">
        <nav class="flex gap-1.5 col-span-4">
          <a href="/">MG</a>
          <span>/</span>
          <a href="/">Work</a>
        </nav>
        {link && <Link href={link} target='_blank' classes="col-span-4">Live Site</Link>}
      </div>
      <div class="grid grid-cols-12 gap-4 col-span-full mt-64">
        <h1 class="col-span-6 sm:col-span-9 text-right order-last text-[32px] leading-[32px] sm:text-[48px] sm:leading-[44px] xl:text-[135px] xl:leading-[112px] xl:-mt-1.5 xl:-mb-0.5 self-end">
          {title}
        </h1>
        <div class="flex flex-col justify-between gap-4 col-span-6 sm:col-span-3">
          <p>{description}</p>
          <div>
            <p>{type}</p>
            <p>{year}</p>
          </div>
        </div>
      </div>
      <div class="grid grid-cols-12 gap-4 col-span-full border-t-[0.5px] border-[#ddd]">
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Roles</p>
          <ul class="col-span-3">{roles.long.map((role: string) => <li>{role}</li>)}</ul>
        </div>
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Team</p>
          <ul class="col-span-3">
            {teammates.map((
              teammate: { name: string, role: string, href: string }
            ) => (
              <li class="flex gap-[2px]">
                <Link
                href={teammate.href}
                classes="hover:bg-neutral-800 hover:text-black"
                >
                {teammate.name}
                </Link> 
                <span>({teammate.role})</span>
              </li>
            ))}
          </ul>
        </div>
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Tools</p>
          <ul class="col-span-3">{tools.map((role: string) => <li>{role}</li>)}</ul>
        </div>
      </div>
      <div class="grid grid-cols-12 gap-4 col-span-full border-t-[0.5px] border-[#ddd]">
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Problem</p>
          <p class="col-span-3">{tldr.problem}</p>
        </div>
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Solution</p>
          <p class="col-span-3">{tldr.solution}</p>
        </div>
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Decisions</p>
          <ul class="col-span-3">
            {tldr.decisions.map((decision: string) => <li>{decision}</li>)}
          </ul>
        </div>
        <div class="col-span-full sm:col-span-3 grid grid-cols-4 sm:grid-cols-1 gap-x-4 h-fit">
          <p>Tradeoffs</p>
          <ul class="col-span-3">
            {tldr.tradeoffs.map((tradeoff: string) => <li>{tradeoff}</li>)}
          </ul>
        </div>
      </div>
      <!-- <figure class="col-span-full select-none pt-4 -mx-4">
        <img
          src={image}
          alt={''}
          class='h-full w-full object-cover'
        />
      </figure> -->
    </section>
    <article
      id="article"
      class="w-full mx-auto col-span-full overflow-visible scroll-mt-6"
    >
      <!-- <ExpandableSidebarNav sections={sections} /> -->
      <div
        class={`
           prose-headings:tracking-[-0.04em]
                    
          prose-h1:text-[32px] prose-h1:leading-[32px] sm:prose-h1:text-[48px] sm:prose-h1:leading-[48px] prose-h1:max-w-prose

          prose-p:leading-4


          prose-strong:font-medium

          prose-a:underline prose-a:decoration-[0.07em] hover:prose-a:no-underline hover:prose-a:bg-neutral-800 hover:prose-a:text-black

          prose-code:bg-neutral-800/[80%] prose-code:ring-1 prose-code:ring-neutral-700/[55%] prose-code:ring-inset prose-code:text-[10px] prose-code:leading-4 prose-code:font-mono prose-code:font-normal prose-code:tracking-tight prose-code:whitespace-nowrap prose-code:rounded-[3px] prose-code:py-0.5 prose-code:px-[5px] 

          prose-ul:list-disc prose-ul:max-w-prose prose-ul:pl-[18px]
          prose-ul:-my-0.5 prose-ul:text-neutral-300

          prose-ol:list-inside prose-ol:list-decimal prose-ol:max-w-prose prose-ol:pl-[22px] prose-ol:-my-0.5 prose-ol:text-neutral-300

          prose-li:list-item
          prose-li:list-outside
          prose-li:pl-0.5
          prose-li:m-0
          prose-li:leading-4
          marker:prose-li:text-[11.5px]
          marker:prose-li:font-inter
          
          prose-figure:w-auto prose-figure:select-none prose-figure:my-0 
          prose-video:w-auto prose-video:select-none	prose-video:my-0 

          prose-td:p-0

          grid grid-cols-12 gap-4
        `}
      >
        <slot />
      </div>
    </article>
  </main>
</Layout>

<script>
  // window.addEventListener("DOMContentLoaded", () => {
  //   const observer = new IntersectionObserver(
  //     (entries) =>
  //       entries.forEach((entry) => {
  //         const id = entry.target.getAttribute("id");
  //         entry.isIntersecting
  //           ? document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.add("active")
  //           : document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.remove("active");
  //       }),
  //     {
  //       rootMargin: "-290px",
  //     }
  //   );

  //   document
  //     .querySelectorAll('h1[id], h2[id], h3[id]')
  //     .forEach((header) => observer.observe(header));
  // });

  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[64px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[64px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

---
import Layout from "./Layout.astro";
import Header from "../components/Header.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import UpRightArrowIcon from "../components/icons/UpRightArrowIcon.astro";
import Button from "../components/Button.astro";
import ExpandableSidebarNav from "../components/study/ExpandableSidebarNav.astro";

const { frontmatter } = Astro.props;
const {
  title,
  tldr,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  teammates,
} = frontmatter;
---

<Layout title={title} description={tldr} maxWidth="max-w-none">
  <main class="relative col-span-full grid grid-cols-8 gap-6 lg:gap-y-12 px-6">
    <Button 
      tag="a" 
      href="#article" 
      padding="px-3 py-1.5"
      classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  px-3.5">Skip to main content</Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[10px] pr-3 py-1.5"
      classes="gap-1 fixed top-6 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[10px] pr-3 py-1.5"
      classes="gap-1 fixed top-6 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-6">Go back</span>
    </Button>
    <Header />
    <section 
      class='col-span-full grid grid-cols-8 gap-6'>
      <figure class={`
        lg:order-last col-span-full lg:col-span-4 select-none -mx-6 lg:ml-0
      `}>
        <img
          src={image}
          alt={''}
          class='aspect-[7/4] h-full w-full object-cover'
        />
      </figure>
      <div class="flex flex-col lg:flex-col-reverse justify-between gap-6 col-span-full lg:col-span-4 h-full">
        <div class="flex justify-between items-end">
          <h1 
            class="font-medium text-5xl lg:text-7xl xl:text-9xl lg:leading-[56px] xl:leading-[96px] tracking-tight italic col-span-full font-serif"
          >
            {title}
          </h1>
          <div class="h-full flex flex-col justify-end lg:justify-between">
            {link && (
              <a href={link} target="blank" class="group -mr-1 xl:mt-6">
                <span class="group-hover:underline">See it</span>
                <UpRightArrowIcon classes="inline-block ml-0.5 mb-px" />
              </a>
            )}
            <p class="hidden lg:inline-block leading-6 lg:leading-3 self-end">{year}</p>
          </div>
        </div>
        <div class="flex flex-col gap-y-6">
          <div class="grid grid-cols-8 gap-x-6 border-t border-[#333333]">
            <p class="col-span-2 lg:col-span-4">In short…</p>
            <p class="col-span-4">{tldr}</p>
          </div>
          <div class="grid grid-cols-8 gap-x-6 border-t border-[#333333]">
            <p class="col-span-2 lg:col-span-4">Role</p>
            <p class="col-span-4 capitalize">{roles.join(", ")}</p>
          </div>
          <div class="grid grid-cols-8 gap-x-6 border-t border-[#333333]">
            <p class="col-span-2 lg:col-span-4">Tools</p>
            <p class="col-span-4 capitalize">{tools.join(", ")}</p>
          </div>
          <div class="grid grid-cols-8 gap-x-6 border-t border-[#333333]">
            <p class="col-span-2 lg:col-span-4">Team</p>
            {teammates?.length > 0 ? (
              <ul class="col-span-4 capitalize">
                {teammates.map((teammate: { name: string, role: string, href: string }) => (
                  <li>
                    <a 
                      href={teammate.href}
                      target="_blank"
                      class="underline" 
                    >
                      {teammate.name}
                    </a> 
                    ({teammate.role})
                  </li>
                ))}
              </ul>
            ) : "—"}
          </div>
          <div class="lg:hidden grid grid-cols-8 gap-x-6 border-t border-[#333333]">
            <p class="col-span-2 lg:col-span-4">Year</p>
            <p class="col-span-4 capitalize">{year}</p>
          </div>
        </div>
      </div>
    </section>
    <article
      id="article"
      class="w-full mx-auto col-span-full overflow-visible scroll-mt-6"
    >
      <ExpandableSidebarNav sections={sections} />
      <div
        class={`
          text-white w-full  
          prose-p:text-[#ababab]
          
          prose-headings:italic prose-headings:font-serif prose-headings:font-medium  prose-headings:text-auto 
          
          prose-h1:text-7xl xl:prose-h1:text-8xl prose-h1:leading-[68px] xl:prose-h1:leading-[92px] prose-h1:tracking-tight

          prose-h3:tracking-wide prose-h3:text-[15px] prose-h3:-mb-[16px]

          prose-p:leading-5
          prose-p:max-w-prose 
          prose-p:my-0

          prose-strong:italic prose-strong:font-serif prose-strong:text-[15px] prose-strong:text-white prose-strong:font-normal prose-strong:tracking-wide

          prose-a:underline

          prose-code:bg-neutral-700/[55%] prose-code:text-white/80 prose-code:ring-1 prose-code:ring-white/[8%] prose-code:ring-inset prose-code:text-[12px] prose-code:leading-5 prose-code:font-mono prose-code:font-normal prose-code:tracking-tight prose-code:whitespace-nowrap prose-code:rounded-[3px] prose-code:py-0.5 prose-code:px-[5px] 

          prose-ul:list-disc prose-ul:max-w-prose prose-ul:pl-[18px]
          prose-ul:my-0

          prose-ol:list-decimal prose-ol:max-w-prose prose-ol:pl-[24px]
          prose-ol:my-0

          prose-li:m-0
          prose-li:pl-0
          prose-li:leading-5
          prose-li:text-[#ababab]
          marker:prose-li:font-mono
          marker:prose-li:text-[#ababab]
          marker:prose-li:text-[0.925em]

          prose-figure:w-auto prose-figure:select-none prose-figure:my-0 prose-figure:-mx-6 sm:prose-figure:-mx-6 md:prose-figure:mx-0 
          prose-video:w-auto prose-video:select-none	prose-video:my-0 prose-video:-mx-6 sm:prose-video:-mx-6 md:prose-video:mx-0

          prose-td:p-0

          grid grid-cols-1 lg:grid-cols-8 gap-y-12 gap-x-6 
        `}
      >
        <slot />
      </div>
    </article>
  </main>
</Layout>

<script>
  // window.addEventListener("DOMContentLoaded", () => {
  //   const observer = new IntersectionObserver(
  //     (entries) =>
  //       entries.forEach((entry) => {
  //         const id = entry.target.getAttribute("id");
  //         entry.isIntersecting
  //           ? document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.add("active")
  //           : document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.remove("active");
  //       }),
  //     {
  //       rootMargin: "-290px",
  //     }
  //   );

  //   document
  //     .querySelectorAll('h1[id], h2[id], h3[id]')
  //     .forEach((header) => observer.observe(header));
  // });

  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

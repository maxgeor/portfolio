---
import Layout from "./Layout.astro";
import Header from "../components/Header.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import ChevronLeftIcon from "../components/icons/ChevronLeftIcon.astro";
import UpRightArrowIcon from "../components/icons/UpRightArrowIcon.astro";
import NavList from "../components/study/NavList.astro";
import Button from "../components/Button.astro";

const { frontmatter } = Astro.props;
const {
  title,
  tldr,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  teammates,
} = frontmatter;
---

<Layout title={title} description={tldr} maxWidth="max-w-none">
  <main class="relative col-span-full">
    <Button 
      tag="a" 
      href="#article" 
      padding="px-3 py-1.5"
      classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  px-3.5">Skip to main content</Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[10px] pr-3 py-1.5"
      classes="gap-1 fixed top-4 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-4">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[10px] pr-3 py-1.5"
      classes="gap-1 fixed top-4 left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-4">Go back</span>
    </Button>
    <div class="flex flex-col gap-4">
      <Header classes="px-4 sm:px-4" />
      <section class="relative px-4 sm:px-4 grid grid-cols-1 md:grid-cols-4 gap-y-3 gap-x-4 pb-4 ">
        <div class="col-span-full flex justify-between gap-4 border-t border-neutral-700 h-min -mb-1">
          <h1>{title}</h1>
          {
            link ? (
              <a
                href={link}
                target="_blank"
                class=" -mr-0.5 flex items-center gap-[3px] hover:underline"
              >
                See it
                <UpRightArrowIcon classes="mt-0.5" />
              </a>
            ) : null
          }
        </div>
        <div>
          <p class="text-neutral-400">In short…</p>
          <p class="my-0.5 leading-4">{tldr}</p>
        </div>
        <div class="capitalize flex flex-col">
          <p class="text-neutral-400">Role</p>
          <p class="my-0.5 leading-4">{roles.join(", ")}</p>
        </div>
        <div class="capitalize">
          <p class="text-neutral-400">Tools</p>
          <p class="my-0.5 leading-4">{tools.join(", ")}</p>
        </div>
        <div class="capitalize sm:mr-10">
          <p class="text-neutral-400">Team</p>
          {teammates?.length > 0 ? (
            <ul>
              {teammates.map((teammate: { name: string, role: string, href: string }) => (
                <li class="my-0.5 leading-4">
                  <a 
                    href={teammate.href}
                    target="_blank"
                    class="underline" 
                  >
                    {teammate.name}
                  </a> 
                  ({teammate.role})
                </li>
              ))}
            </ul>
          ) : "—"}
        </div>
        <p class="md:absolute top-[49px] right-4">{year}</p>
      </section>
    </div>
    {
      image ? (
        <div id="cover" class="relative">
          <div class="absolute inset-0 bottom-auto h-px bg-black/[5%] z-10"></div>
          <div class="absolute inset-0 bg-black/[1%] z-5"></div>
          <img
            id="cover-image"
            src={image}
            alt={`Mockup cover image of ${title}`}
            class="aspect-[5/3] sm:aspect-[2/1] md:aspect-[9/4] max-h-[900px] w-full select-none object-cover object-center"
          />
          <div class="absolute inset-0 top-auto h-px bg-black/[5%] z-10"></div> 
        </div>
      ) : null
    }
    <div class="flex flex-col gap-4 w-full">
      <article
        id="article"
        class="w-full relative mx-auto grid min-h-screen grid-cols-1 gap-4 sm:gap-4 overflow-visible md:grid-cols-4 scroll-mt-4 md:px-4"
      >
        <nav
          class={`
            flex flex-col items-start justify-start overflow-auto md:overflow-scroll no-scrollbar col-span-full md:h-screen scroll-smooth md:sticky top-0 md:col-span-1 py-3 px-4 md:p-0 md:pr-4 md:pb-16 w-full z-50 gap-y-3
          `}
        >
          <a 
            href="/" 
            class="hidden md:flex justify-center items-center p-4 -ml-4 text-xs text-neutral-490 hover:text-neutral-50 transition duration-100 ease-in-out"
          >
            <ChevronLeftIcon classes="-ml-[2px]" />
          </a>
          <NavList sections={sections} />
        </nav>
        <div
          class={`
            prose-sm text-neutral-250 w-full
            
            prose-headings:text-neutral-50 prose-headings:font-medium

            prose-h1:tracking-[-0.03rem] prose-h1:text-[24px] prose-h1:leading-[28px] prose-h1:text-neutral-50 prose-h1:mt-12 first:prose-h1:mt-0 prose-h1:mb-4
            prose-h1:scroll-mt-[47px] md:prose-h1:scroll-mt-12

            prose-h2:tracking-[-0.0025em] prose-h2:text-[14px] prose-h2:leading-5 prose-h2:scroll-mt-14

            prose-h3:italic prose-h3:font-normal prose-h3:text-[14px] prose-h3:leading-5 prose-h3:text-neutral-50

            prose-p:leading-5
            prose-p:max-w-prose 

            prose-strong:font-medium prose-strong:text-neutral-50 prose-strong:tracking-[-0.0025em]

            prose-a:underline

            prose-code:bg-neutral-700/[55%] prose-code:border prose-code:border-neutral-700 prose-code:text-[12px] prose-code:leading-5 prose-code:font-mono prose-code:font-normal prose-code:tracking-tight prose-code:whitespace-nowrap prose-code:rounded-[3px] prose-code:py-px prose-code:px-[3px] 

            prose-ul:list-disc prose-ul:col-span-full xl:prose-ul:col-start-2 xl:prose-ul:col-end-8 prose-ul:max-w-prose prose-ul:pl-[21px]

            prose-ol:list-decimal prose-ol:col-span-full xl:prose-ol:col-start-2 xl:prose-ol:col-end-8 prose-ol:max-w-prose prose-ol:pl-[21px]

            prose-li:m-0
            prose-li:pl-1
            prose-li:leading-5

            prose-figure:w-auto prose-figure:select-none prose-figure:mt-6 prose-figure:mb-8 prose-figure:-mx-4 sm:prose-figure:-mx-4 md:prose-figure:mx-0 
            prose-video:w-auto prose-video:select-none	prose-video:mt-6 prose-video:mb-8 prose-video:-mx-4 sm:prose-video:-mx-4 md:prose-video:mx-0

            prose-td:p-0

            col-span-full md:col-start-2 xl:col-end-4 max-w-5xl 2xl:max-w-2xl 
            pt-4 md:pt-12 px-4 sm:px-4 md:px-0 mx-auto 
          `}
        >
          <slot />
        </div>
      </article>
    </div>
  </main>
</Layout>

<script>
  // window.addEventListener("DOMContentLoaded", () => {
  //   const observer = new IntersectionObserver(
  //     (entries) =>
  //       entries.forEach((entry) => {
  //         const id = entry.target.getAttribute("id");
  //         entry.isIntersecting
  //           ? document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.add("active")
  //           : document
  //               .querySelector(`nav li a[href="#${id}"]`)
  //               ?.parentElement?.classList.remove("active");
  //       }),
  //     {
  //       rootMargin: "-290px",
  //     }
  //   );

  //   document
  //     .querySelectorAll('h1[id], h2[id], h3[id]')
  //     .forEach((header) => observer.observe(header));
  // });

  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

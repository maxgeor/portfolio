---
import Layout from "./Layout.astro";
import Header from "../components/Header.astro";
import DetailsTable from "../components/work/DetailsTable.astro";
const { frontmatter } = Astro.props;
const {
  title,
  roles,
  year,
  link,
  image,
  tools,
  description,
  collaborators,
} = frontmatter;
---
<Layout title={title}>
  <main class="grid sm:grid-cols-12 gap-12 relative mx-6 sm:mx-12 pb-24">
    <button id="go-back-up-button" class="flex items-center gap-2 fixed top-0 left-0 right-0 z-10 bg-white/[85%] backdrop-blur-sm border-b border-gray-200/75 transform -translate-y-[52px] transition duration-[800ms] ease-in-out px-6 sm:px-12 py-4">
      <svg class="-ml-0.5 -mb-0.5" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
      Go back
    </button>
    <Header 
      link={
        link ? { 
          text: 'See it', 
          href: link, 
          classes: 'hidden lg:flex', 
          isExternal: true 
        } : undefined
      } 
    />
    <div class="relative col-span-full grid grid-cols-1 lg:grid-cols-12 gap-y-6 gap-x-12 pb-2 xl:pb-12 xl:border-b border-gray-200">
      <div class="col-span-full lg:col-span-2 flex justify-between">
        <h1 class="-my-1">{title}</h1>
        {link ? (
          <a href={link} target="_blank" class="flex items-center lg:hidden gap-[3px] hover:underline focus:underline  -my-1 -mr-[3px]">
            <span>See it</span>
            <svg class="mt-0.5" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
          </a>
        ) : null}
      </div>
      <p class={`col-span-full lg:col-span-4 -my-1`}>{description}</p>
      <div class="flex flex-col -my-1 col-span-full lg:col-span-4">
        <DetailsTable
          roles={roles}
          tools={tools}
          collaborators={collaborators}
        />
      </div>
      <div class="lg:col-span-2 w-full flex lg:justify-end -my-1">{year}</div>
    </div>
    <article id="content" class="col-span-full">
      <div class={`
        prose-sm max-w-none
        prose-headings:text-sm prose-headings:leading-6 prose-headings:-my-1.5
        prose-h1:font-normal lg:prose-h1:font-normal prose-h1:mt-0 lg:prose-h1:-mt-1.5
        prose-h2:font-semibold prose-h2:-mb-[18px] prose-h2:-mt-0.5 first:prose-h2:-mt-1.5
        prose-p:-my-1.5 prose-p:max-w-prose
        prose-a:underline
        prose-code:bg-gray-100 prose-code:rounded prose-code:px-1 prose-code:border prose-code:border-gray-300/30 prose-code:py-[2px] prose-code:text-[12px] prose-code:tracking-tight prose-code:leading-6 prose-code:font-mono prose-code:font-normal prose-code:whitespace-nowrap
        prose-ul:list-disc prose-ul:-my-1.5 prose-ul:pl-6 lg:prose-ul:pl-4 prose-ul:max-w-prose
        prose-ol:list-decimal prose-ol:-my-1.5 prose-ol:pl-6 lg:prose-ol:pl-4 prose-ol:max-w-prose prose-ol:
        first:prose-li:mt-0 last:prose-li:mb-0
        prose-img:h-min prose-img:m-0
        grid grid-cols-1 lg:grid-cols-12 gap-12 text-black
      `}>
        <slot />
      </div>
    </article>
    <button id="go-back-down-button" class="flex items-center gap-2 fixed bottom-0 left-0 right-0 bg-white/[85%] backdrop-blur-sm border-t border-gray-200/75 transition transform translate-y-[52px] duration-[800ms] ease-in-out px-6 sm:px-12 py-4">
      <svg class="-ml-0.5 -mt-px" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
      Go back
    </button>
  </main>
</Layout>

<style is:inline>
  #content > div > ul > li::marker {
    width: 16px;
    height: 16px;
    border-radius: 100%;
    background-color: #000;
  }
  
  ol li::marker {
    font-family: sans-serif;
  }

  mark {
    padding: 4px;
    margin: 0 -4px;
    background-color: yellow;
  }
</style>

<script is:inline>
  function isElementInView(element) {
    const rect = element.getBoundingClientRect();
    const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight = window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  }

  const goBack = () => window.history.back();

  const showGoBackUpButton = () => goBackUpButton.classList.remove('-translate-y-[52px]');
  const hideGoBackUpButton = () => goBackUpButton.classList.add('-translate-y-[52px]');
  const showGoBackDownButton = () => goBackDownButton.classList.remove('translate-y-[52px]');
  const hideGoBackDownButton = () => goBackDownButton.classList.add('translate-y-[52px]');

  function showGoBackButton(e) {
    hideGoBackUpButton();
    hideGoBackDownButton();

    const clickedLink = e.target;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const isClickedLinkAboveFold = window.scrollY > clickedLink.offsetTop;

      if (isClickedLinkAboveFold) {
        showGoBackUpButton();
        // clearTimeout when necessary
        setTimeout(() => hideGoBackUpButton(), 8000);
      } else {
        showGoBackDownButton();
        // clearTimeout when necessary
        setTimeout(() => hideGoBackDownButton(), 8000);
      }
    }, 600)
  }

  const anchors = document.querySelectorAll('.anchor');
  const goBackUpButton = document.querySelector('#go-back-up-button');
  const goBackDownButton = document.querySelector('#go-back-down-button');

  anchors.forEach(anchor => anchor.addEventListener('click', e => {
    // TODO: See if programatic scroll fucks history
    
    // prevent default (stop navigation to anchor)
    // scroll to anchor with padding

    showGoBackButton(e);

    // Push last location onto history (if needed)
  }));

  goBackUpButton.addEventListener('click', () => {
    goBack();
    hideGoBackUpButton();
  });

  goBackDownButton.addEventListener('click', () => {
    goBack();
    hideGoBackDownButton();
  });
</script>
---
import Layout from "./Layout.astro";
import Button from "../components/Button.astro";
import NavBar from "../components/prose/nav/NavBar.astro";
import Header from "../components/Header.astro";
import ThemeButton from "../components/ThemeButton.astro";
import Details from "../components/work/Details.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import ChevronLeftIcon from "../components/icons/ChevronLeftIcon.astro";
import UpRightArrowIcon from "../components/icons/UpRightArrowIcon.astro";

const { frontmatter } = Astro.props;
const {
  title,
  tldr,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  collaborators,
} = frontmatter;
---

<Layout title={title} description={tldr} maxWidth="max-w-none">
  <main class="relative col-span-full">
    <!-- <Button tag="a" href="#article" classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  px-3.5">Skip to main content</Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[12px] pr-[14px] py-2"
      classes="gap-1 fixed top-3.5 sm:top-[38px] left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-4">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[12px] pr-[14px] py-2"
      classes="gap-1 fixed top-3.5 sm:top-[38px] left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-4">Go back</span>
    </Button> -->
    <div class="flex flex-col gap-5">
      <Header classes="px-4 sm:px-6" />
      <section class="relative px-4 sm:px-6 grid grid-cols-1 md:grid-cols-4 gap-y-4 gap-x-6 pb-6 -mt-px">
        <div class="col-span-full flex justify-between gap-4 border-t border-[#DADADA] dark:border-neutral-700 h-min">
          <h1>{title}</h1>
          {
            link ? (
              <a
                href={link}
                target="_blank"
                class=" -mr-0.5 flex items-center gap-[3px] hover:underline"
              >
                See it
                <UpRightArrowIcon classes="mt-0.5" />
              </a>
            ) : null
          }
        </div>
        <p class="col-span-1">{tldr}</p>
        <div class="capitalize">
          <p>Role</p>
          <p>{roles.join(", ")}</p>
        </div>
        <div class="capitalize">
          <p>Tools</p>
          <p>{tools.join(", ")}</p>
        </div>
        <div class="capitalize">
          <p>Team</p>
          {collaborators?.length > 0 ? (
            <ul>
              {collaborators.map((collaborator: { name: string, role: string, href: string }) => 
                <li>
                  <a href={collaborator.href}></a> ({collaborator.role})
                </li>
              )}
            </ul>
          ) : "â€”"}
        </div>
        <p class="md:absolute bottom-6 right-6">{year}</p>
      </section>
    </div>
    {
      image ? (
        <div id="cover" class="relative w-full">
          <div class="absolute inset-0 bg-gradient-to-b from-black/[1%] via-black/[1.5%] to-black/[2%] z-5"></div>
          <div class="absolute inset-0 top-auto h-px bg-gradient-to-b from:black/[7%] z-10"></div>
          <img
            id="cover-image"
            src={image}
            alt={`Mockup cover image of ${title}`}
            class="aspect-[5/3] max-h-[900px] w-full select-none object-cover object-center sm:aspect-[2/1] md:aspect-[9/4]"
          />
          <div class="absolute inset-0 bottom-auto h-px bg-gradient-to-t from-black/[7%] z-10"></div>
        </div>
      ) : null
    }
    <div class="flex flex-col gap-4 w-full">
      <article
        id="article"
        class="w-full relative mx-auto grid min-h-screen grid-cols-1 gap-4 sm:gap-6 overflow-visible md:grid-cols-4 scroll-mt-4 sm:px-6"
      >
        <NavBar sections={sections} /> 
        <div
          class={`
            prose-td:p-0 pt-12 px-4 md:px-0 
            prose-sm max-w-5xl 2xl:max-w-2xl mx-auto
            prose-headings:col-span-full xl:prose-headings:col-start-2 xl:prose-headings:col-end-8 prose-headings:max-w-prose prose-headings:font-medium prose-headings:text-neutral-950 dark:prose-headings:text-neutral-50 prose-headings:m-0 prose-headings:scroll-mt-[72px] sm:prose-headings:scroll-mt-[108px]
            prose-h1:text-neutral-950 dark:prose-h1:text-neutral-50 prose-h1:text-[24px] prose-h1:leading-[28px] prose-h1:tracking-[-0.0325rem] prose-h1:mt-[48px] first:prose-h1:mt-0
            prose-h2:tracking-[-0.0225em] dark:prose-h2:tracking-[-0.015em] dark: prose-h2:text-[14px] prose-h2:-mb-1 prose-h2:leading-5 prose-h2:mt-3
            prose-h3:italic prose-h3:font-normal prose-h3:text-[14px] prose-h3:-mb-[12px] prose-h3:leading-5 prose-h3:text-neutral-950
            prose-p:col-span-full xl:prose-p:col-start-2 xl:prose-p:col-end-8 prose-p:max-w-prose prose-p:m-0
            prose-strong:font-medium prose-strong:text-neutral-950 dark:prose-strong:text-neutral-50
            prose-a:underline
            prose-code:bg-neutral-190/[90%] dark:prose-code:bg-neutral-700/[50%] prose-code:rounded-[3px] prose-code:px-[3px] prose-code:border prose-code:border-neutral-300/[27%] dark:prose-code:border-neutral-700/[52%] prose-code:py-[1px] prose-code:text-[12px] prose-code:tracking-tight prose-code:leading-5 prose-code:font-mono prose-code:font-normal prose-code:whitespace-nowrap
            
            prose-ul:list-disc prose-ul:col-span-full xl:prose-ul:col-start-2 xl:prose-ul:col-end-8 prose-ul:max-w-prose prose-ul:pl-[22px] prose-ul:m-0
            prose-ol:list-decimal prose-ol:col-span-full xl:prose-ol:col-start-2 xl:prose-ol:col-end-8 prose-ol:max-w-prose prose-ol:pl-[22px] prose-ol:m-0
            prose-li:m-0
            prose-li:pl-1
            prose-li:leading-5

            prose-figure:col-span-full prose-figure:mt-1 prose-figure:mb-2 prose-figure:select-none
            prose-img:m-0
            prose-video:col-span-full prose-video:mt-1 prose-video:mb-2 prose-video:select-none	
            col-span-full sm:col-start-2 xl:col-end-4 flex flex-col gap-y-4 gap-x-6
            prose-p:leading-5
          `}
        >
          <slot />
        </div>
      </article>
    </div>
  </main>
</Layout>

<style>
  article div .prose-ol > .prose-li { counter-reset: list-counter; }
  article div .prose-ol > .prose-li { display: block; }
  article div .prose-ol > .prose-li:before { 
    content: counter(item) ". ";
    counter-increment: item;
    width: 2em;
    display: inline-block;
  }
</style>

<script>
  // Add/remove shadows on home and theme buttons past the cover image on big screens
  const homeButton = document.querySelector('#home-button') as HTMLAnchorElement;
  const themeButton = document.querySelector('#theme-button > div') as HTMLElement;

  const handleNavButtonShadows = () => {
    const coverImage = document.querySelector('#cover-image') as HTMLImageElement;

    if (window.innerWidth < 1024 || window.scrollY < coverImage.offsetHeight + 40) {
      homeButton.classList.add('shadow-outline', 'dark:shadow-outline-dark');
      themeButton.classList.add('shadow-outline', 'dark:shadow-outline-dark');
    } else {
      homeButton.classList.remove('shadow-outline', 'dark:shadow-outline-dark');
      themeButton.classList.remove('shadow-outline', 'dark:shadow-outline-dark');
    }
  }

  document.addEventListener("DOMContentLoaded", () => handleNavButtonShadows());
  window.addEventListener('scroll', () => handleNavButtonShadows());

  // Highlight nav link for current section
  window.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) =>
        entries.forEach((entry) => {
          const id = entry.target.getAttribute("id");
          entry.isIntersecting
            ? document
                .querySelector(`nav li a[href="#${id}"]`)
                ?.parentElement?.classList.add("active")
            : document
                .querySelector(`nav li a[href="#${id}"]`)
                ?.parentElement?.classList.remove("active");
        }),
      {
        rootMargin: "-290px",
      }
    );

    document
      .querySelectorAll("section[id]")
      .forEach((section) => observer.observe(section));
  });

  // Show and hide back button when clikcing on internal links
  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

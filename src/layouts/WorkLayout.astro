---
import Layout from "./Layout.astro";
import Header from "../components/Header.astro";
import Details from "../components/work/Details.astro";

const { frontmatter } = Astro.props;
const {
  title,
  roles,
  year,
  link,
  tools,
  sections,
  description,
  collaborators,
} = frontmatter;
---
<Layout title={title} description={description}>
  <main class="grid sm:grid-cols-12 gap-12 relative mx-6 sm:mx-12 pb-24 h-full">
    <button id="go-back-up-button" class="flex items-center gap-2 fixed top-0 left-0 right-0 z-10 bg-white/[85%] backdrop-blur-sm border-b border-gray-200/75 transform -translate-y-[52px] transition duration-[800ms] ease-in-out px-6 sm:px-12 py-4">
      <svg class="-ml-0.5 -mb-0.5" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
      Go back
    </button>
    <button id="go-back-down-button" class="flex items-center gap-2 fixed top-0 left-0 right-0 z-10 bg-white/[85%] backdrop-blur-sm border-b border-gray-200/75 transform -translate-y-[52px] transition duration-[800ms] ease-in-out px-6 sm:px-12 py-4">
      <svg class="-ml-0.5 -mt-px" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
      Go back
    </button>
    <Header 
      link={
        link ? { 
          text: 'See it', 
          href: link, 
          classes: 'hidden lg:flex', 
          isExternal: true 
        } : undefined
      } 
    />
    <div class="relative col-span-full grid grid-cols-1 lg:grid-cols-12 gap-y-6 gap-x-12 pb-12 lg:pb-0 border-b lg:border-0">
      <div class="col-span-full lg:col-span-2 flex justify-between">
        <h1 class="-my-1">{title}</h1>
        {link ? (
          <a href={link} target="_blank" class="flex items-center lg:hidden gap-[3px] hover:underline focus:underline  -my-1 -mr-[3px]">
            <span>See it</span>
            <svg class="mt-0.5" width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3.64645 11.3536C3.45118 11.1583 3.45118 10.8417 3.64645 10.6465L10.2929 4L6 4C5.72386 4 5.5 3.77614 5.5 3.5C5.5 3.22386 5.72386 3 6 3L11.5 3C11.6326 3 11.7598 3.05268 11.8536 3.14645C11.9473 3.24022 12 3.36739 12 3.5L12 9.00001C12 9.27615 11.7761 9.50001 11.5 9.50001C11.2239 9.50001 11 9.27615 11 9.00001V4.70711L4.35355 11.3536C4.15829 11.5488 3.84171 11.5488 3.64645 11.3536Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
          </a>
        ) : null}
      </div>
      <p class={`col-span-full lg:col-span-4 -my-1`}>{description}</p>
      <div class="flex flex-col -my-1 col-span-full lg:col-span-4">
        <Details
          roles={roles}
          tools={tools}
          collaborators={collaborators}
        />
      </div>
      <div class="lg:col-span-2 w-full flex lg:justify-end -my-1">{year}</div>
    </div>
    <article id="content" class="relative col-span-full grid grid-cols-1 md:grid-cols-12 gap-12 h-full -mt-1">
      <aside class="hidden lg:flex flex-col gap-2 lg:col-span-2  sticky top-12">
        {sections.map((section: string) => (
          <a 
            href={`#${section.replace(/\s+/g, '-').toLowerCase()}`} 
            class="block leading-5 hover:underline focus:underline text-gray-500"
          >
            {section}
          </a>
        ))}
      </aside>
      <div class={`
        prose-sm max-w-2xl lg:max-w-none mx-auto
        prose-headings:col-span-full xl:prose-headings:col-start-2 xl:prose-headings:col-end-8 prose-headings:max-w-prose prose-headings:font-bold prose-headings:m-0
        prose-h1:text-[20px] lg:prose-h1:text-[22px] prose-h1:leading-[24px] prose-h1:mt-10 lg:prose-h1:mt-12 first:prose-h1:mt-0
        prose-h2:text-[14px] prose-h2:leading-6 prose-h2:mt-2 prose-h2:-mb-2
        prose-p:col-span-full xl:prose-p:col-start-2 xl:prose-p:col-end-8 prose-p:max-w-prose prose-p:m-0
        prose-a:underline
        prose-code:bg-gray-100 prose-code:rounded prose-code:px-1 prose-code:border prose-code:border-gray-300/30 prose-code:py-[2px] prose-code:text-[12px] prose-code:tracking-tight prose-code:leading-6 prose-code:font-mono prose-code:font-normal prose-code:whitespace-nowrap
        prose-ul:list-disc prose-ul:col-span-full xl:prose-ul:col-start-2 xl:prose-ul:col-end-8 prose-ul:max-w-prose prose-ul:pl-[21px] sm:prose-ul:pl-5 xl:prose-ul:pl-4 prose-ul:m-0
        prose-ol:list-decimal prose-ol:col-span-full xl:prose-ol:col-start-2 xl:prose-ol:col-end-8 prose-ol:max-w-prose prose-ol:5 xl:prose-ol:pl-4 prose-ol:m-0
        prose-li:m-0
        prose-img:col-span-full prose-img:m-0
        col-span-full lg:col-start-3 lg:col-span-8 grid grid-cols-1 md:grid-cols-8 gap-y-4 gap-x-12
      `}>
        <slot />
      </div>
    </article>
  </main>
</Layout>

<script>
  const links = Array.from(document.querySelectorAll('a'));
  const internalLinks = links.filter(link => link.getAttribute('href')?.startsWith('#'));
  const goBackUpButton: HTMLButtonElement | null = document.querySelector('#go-back-up-button');
  const goBackDownButton: HTMLButtonElement | null = document.querySelector('#go-back-down-button');

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight = window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  }

  const goBack = () => window.history.back();
  const showBackButton = (button: HTMLButtonElement | null) => button?.classList.remove('-translate-y-[52px]');
  const hideBackButton = (button: HTMLButtonElement | null) => button?.classList.add('-translate-y-[52px]');
  
  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;
      
      const backButton = window.scrollY > clickedLink.offsetTop ? goBackUpButton : goBackDownButton;
      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550)
  }

  internalLinks.forEach(internalLink => {
    internalLink.addEventListener('click', e => showAndHideBackButton(e))
  });

  goBackUpButton?.addEventListener('click', () => {
    goBack();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton?.addEventListener('click', () => {
    goBack();
    hideBackButton(goBackDownButton);
  });
</script>
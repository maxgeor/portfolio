---
import Layout from "./Layout.astro";
import Button from "../components/Button.astro";
import NavBar from "../components/prose/nav/NavBar.astro";
import ThemeButton from "../components/ThemeButton.astro";
import Details from "../components/work/Details.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import ChevronLeftIcon from "../components/icons/ChevronLeftIcon.astro";
import ExternalLinkIcon from "../components/icons/ExternalLinkIcon.astro";

const { frontmatter } = Astro.props;
const {
  title,
  tldr,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  collaborators,
} = frontmatter;
---

<Layout title={title} description={tldr.join(". ")} maxWidth="max-w-none">
  <main class="relative flex flex-col gap-12 overflow-visible">
    <Button tag="a" href="#article" classes="opacity-0 focus:opacity-100 pointer-events-none focus:pointer-events-auto absolute z-50 top-3 sm:top-9 transform left-1/2 -translate-x-1/2  px-3.5">Skip to main content</Button>
    <Button
      id="go-back-up-button"
      ariaLabel="Go back up"
      ariaHidden="true"
      disabled={true}
      padding="pl-[12px] pr-[14px] py-2"
      classes="gap-1 fixed top-3.5 sm:top-[38px] left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronUpIcon classes="-mx-px -mb-px" />
      <span class="leading-4">Go back</span>
    </Button>
    <Button
      id="go-back-down-button"
      disabled={true}
      ariaLabel="Go back down"
      ariaHidden="true"
      padding="pl-[12px] pr-[14px] py-2"
      classes="gap-1 fixed top-3.5 sm:top-[38px] left-1/2 z-50 transform -translate-x-1/2 -translate-y-[52px] sm:-translate-y-[80px] duration-[800ms]"
    >
      <ChevronDownIcon classes="-mx-px -mt-px" />
      <span class="leading-4">Go back</span>
    </Button>
    <Button
      tag="a"
      href="/"
      id="home-button"
      ariaLabel="Go back home"
      classes="fixed top-[14px] sm:top-[38px] left-[12px] sm:left-[33px] md:left-[36px] z-40"
    >
      <ChevronLeftIcon />
    </Button>
    <ThemeButton
      padding="p-3"
      hasOutline={true}
      invisiblePadding={undefined}
      classes="fixed top-[14px] sm:top-[38px] right-[12px] sm:right-[32px] md:right-[36px] z-40"
    />
    {
      image ? (
        <div id="cover" class="relative -mb-6 w-full sm:my-0">
          <div class="absolute inset-0 z-10 bg-gradient-to-b from-black/[3%] from-0% to-10%" />
          <img
            id="cover-image"
            src={image}
            alt={`Mockup cover image of ${title}`}
            class="aspect-[5/3] max-h-[800px] w-full select-none object-cover object-center dark:brightness-[90%] sm:aspect-[2/1] lg:aspect-[5/2]"
          />
          <div class="h-px w-full absolute inset-0 top-auto bg-black/[2%] dark:bg-transparent"></div>
        </div>
      ) : null
    }
    <div class="flex flex-col gap-12">
      <div
        class="relative mx-6 grid grid-cols-1 gap-y-6 gap-x-12 border-[#EEE] dark:border-[#333333] sm:mx-12 lg:grid-cols-12 lg:border-b lg:pb-12"
      >
        <div class="col-span-full flex justify-between lg:col-span-2">
          <h1 class="-my-1">{title}</h1>
          {
            link ? (
              <a
                href={link}
                target="_blank"
                class="-my-1 -mr-[3px] flex items-center gap-[3px] hover:underline lg:hidden"
              >
                See it
                <ExternalLinkIcon classes="mt-0.5" />
              </a>
            ) : null
          }
        </div>
        {
          tldr.length === 1 ? (
            tldr[0]
          ) : (
            <ul
              role="list"
              class="col-span-full -my-1 flex list-disc flex-col gap-1 pl-5 lg:col-span-4"
            >
              {tldr.map((bullet: string) => (
                <li class="relative block before:absolute before:-left-[22px] before:-top-0.5 before:rounded-full before:text-[24px] before:content-['â€¢']">
                  {bullet}
                </li>
              ))}
            </ul>
          )
        }
        <div class="col-span-full -my-1 flex flex-col lg:col-span-4">
          <Details roles={roles} tools={tools} collaborators={collaborators} />
        </div>
        <div
          class="flex flex-col justify-between gap-2 lg:col-span-2 lg:items-end"
        >
          {
            link ? (
              <a
                href={link}
                target="_blank"
                class="-my-1 -mr-[3px] hidden items-center gap-[3px] hover:underline lg:flex"
              >
                <span class="whitespace-nowrap">See it</span>
                <ExternalLinkIcon classes="mt-0.5" />
              </a>
            ) : null
          }
          <span class="-my-1">{year}</span>
        </div>
      </div>
      <article
        id="article"
        class="relative mx-auto grid min-h-screen grid-cols-1 gap-12 overflow-visible sm:max-w-3xl md:grid-cols-12 lg:mx-0 lg:-mt-1 lg:max-w-none lg:px-12 scroll-mt-12"
      >
        <hr
          class="absolute top-0 left-1/2 h-px w-screen -translate-x-1/2 transform border-t border-[#EEE] dark:border-[#333333] lg:hidden"
        />
        <NavBar sections={sections} />
        <div
          class={`
          prose-td:p-0
            prose-sm px-6 sm:px-12 lg:px-0 max-w-5xl mx-auto
            prose-headings:col-span-full xl:prose-headings:col-start-2 xl:prose-headings:col-end-8 prose-headings:max-w-prose prose-headings:font-medium prose-headings:text-neutral-950 dark:prose-headings:text-neutral-50 prose-headings:m-0 prose-headings:scroll-mt-[72px] sm:prose-headings:scroll-mt-[108px]
            prose-h1:text-neutral-950 dark:prose-h1:text-neutral-50 prose-h1:text-[24px] prose-h1:leading-[28px] prose-h1:tracking-[-0.035rem] dark:prose-h1:tracking-[-0.025rem] prose-h1:mt-[48px] first:prose-h1:mt-0
            prose-h2:text-[14px] prose-h2:-mb-1 prose-h2:leading-5 prose-h2:mt-3
            prose-h3:italic prose-h3:font-normal  prose-h3:text-[14px] prose-h3:-mb-[14px] prose-h3:leading-5 prose-h3:text-neutral-950
            prose-p:col-span-full xl:prose-p:col-start-2 xl:prose-p:col-end-8 prose-p:max-w-prose prose-p:m-0
            prose-strong:font-medium prose-strong:text-neutral-950 dark:prose-strong:text-neutral-50
            prose-a:underline
            prose-code:bg-neutral-190/[90%] dark:prose-code:bg-neutral-700/[59%] prose-code:rounded prose-code:px-1 prose-code:border prose-code:border-neutral-300/[26%] dark:prose-code:border-neutral-700 prose-code:py-[2px] prose-code:text-[12px] prose-code:tracking-tight prose-code:leading-6 prose-code:font-mono prose-code:font-normal prose-code:whitespace-nowrap
            
            prose-ul:list-disc prose-ul:col-span-full xl:prose-ul:col-start-2 xl:prose-ul:col-end-8 prose-ul:max-w-prose prose-ul:pl-5 prose-ul:m-0
            prose-ol:list-decimal prose-ol:col-span-full xl:prose-ol:col-start-2 xl:prose-ol:col-end-8 prose-ol:max-w-prose prose-ol:pl-5 prose-ol:m-0
            prose-li:m-0
            prose-figure:col-span-full prose-figure:mt-1 prose-figure:mb-2 prose-figure:select-none
            prose-img:m-0
            prose-video:col-span-full prose-video:mt-1 prose-video:mb-2 prose-video:select-none	
            col-span-full lg:col-start-3 lg:col-span-8 grid grid-cols-1 md:grid-cols-8 gap-y-3 gap-x-12
          `}
        >
          <slot />
        </div>
      </article>
    </div>
  </main>
</Layout>

<script>
  // Add/remove shadows on home and theme buttons past the cover image on big screens
  const homeButton = document.querySelector('#home-button') as HTMLAnchorElement;
  const themeButton = document.querySelector('#theme-button > div') as HTMLElement;

  const handleNavButtonShadows = () => {
    const coverImage = document.querySelector('#cover-image') as HTMLImageElement;

    if (window.innerWidth < 1024 || window.scrollY < coverImage.offsetHeight + 40) {
      homeButton.classList.add('shadow-outline', 'dark:shadow-outline-dark');
      themeButton.classList.add('shadow-outline', 'dark:shadow-outline-dark');
    } else {
      homeButton.classList.remove('shadow-outline', 'dark:shadow-outline-dark');
      themeButton.classList.remove('shadow-outline', 'dark:shadow-outline-dark');
    }
  }

  document.addEventListener("DOMContentLoaded", () => handleNavButtonShadows());
  window.addEventListener('scroll', () => handleNavButtonShadows());

  // Highlight nav link for current section
  window.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) =>
        entries.forEach((entry) => {
          const id = entry.target.getAttribute("id");
          entry.isIntersecting
            ? document
                .querySelector(`nav li a[href="#${id}"]`)
                ?.parentElement?.classList.add("active")
            : document
                .querySelector(`nav li a[href="#${id}"]`)
                ?.parentElement?.classList.remove("active");
        }),
      {
        rootMargin: "-290px",
      }
    );

    document
      .querySelectorAll("section[id]")
      .forEach((section) => observer.observe(section));
  });

  // Show and hide back button when clikcing on internal links
  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter((link) =>
    link.getAttribute("href")?.startsWith("#")
  );

  const goBackUpButton = document.querySelector(
    "#go-back-up-button"
  ) as HTMLButtonElement;
  const goBackDownButton = document.querySelector(
    "#go-back-down-button"
  ) as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const showBackButton = (button: HTMLButtonElement) => {
    button.disabled = false;
    button.ariaHidden = 'false';
    button.classList.remove("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }
  const hideBackButton = (button: HTMLButtonElement) => {
    button.disabled = true;
    button.ariaHidden = 'true';
    button.classList.add("-translate-y-[52px]", "sm:-translate-y-[80px]");
  }

  const showAndHideBackButton = (e: Event) => {
    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    if (clickedLink.getAttribute("href") === "#article") return;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.getBoundingClientRect().top
          ? goBackUpButton
          : goBackDownButton;

      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    window.history.back();
    hideBackButton(goBackDownButton);
  });
</script>

---
import Layout from "./Layout.astro";
import NavBar from "../components/prose/nav/NavBar.astro";
import ThemeButton from "../components/ThemeButton.astro";
import Details from "../components/work/Details.astro";
import ChevronUpIcon from "../components/icons/ChevronUpIcon.astro";
import ChevronDownIcon from "../components/icons/ChevronDownIcon.astro";
import ChevronLeftIcon from "../components/icons/ChevronLeftIcon.astro";
import ExternalLinkIcon from "../components/icons/ExternalLinkIcon.astro";

const { frontmatter } = Astro.props;
const {
  title,
  tldr,
  roles,
  year,
  link,
  tools,
  sections,
  image,
  collaborators,
} = frontmatter;
---

<Layout title={title} description={tldr[0]} maxWidth="max-w-none">
  <main class="relative flex flex-col gap-12 pb-24 overflow-visible">
    <button
      id="go-back-up-button"
      class="fixed top-3 left-1/2 z-50 col-span-full flex w-fit -translate-x-1/2 -translate-y-[49px] sm:-translate-y-[88px] transform items-center gap-2 rounded-full bg-white/[85%] py-2 pl-[15px] pr-4 text-black shadow-sm ring-1 ring-gray-900/[11%] backdrop-blur-sm transition duration-[800ms] ease-in-out hover:bg-gray-50 dark:border-[#333333]/75 dark:bg-[#212121]/[85%] dark:text-white dark:shadow-none dark:ring-white/10 dark:hover:bg-[#2e2e2e] sm:top-9 "
    >
      <ChevronUpIcon classes="-ml-0.5 -mb-px" />
      Go back
    </button>
    <button
      class="fixed top-3 left-1/2 z-50 col-span-full flex w-fit -translate-x-1/2 -translate-y-[49px] sm:-translate-y-[88px] transform items-center gap-2 rounded-full bg-white/[85%] py-2 pl-[15px] pr-4 text-black shadow-sm ring-1 ring-gray-900/[11%] backdrop-blur-sm transition duration-[800ms] ease-in-out hover:bg-gray-100 dark:border-[#333333]/75 dark:bg-[#212121]/[85%] dark:text-white dark:shadow-none dark:ring-white/10 dark:hover:bg-[#2e2e2e] sm:top-9 "
      id="go-back-down-button"
    >
      <ChevronDownIcon classes="-ml-0.5 -mt-px" />
      Go back
    </button>
    <a
      id="home-button"
      href="/"
      class="fixed top-[14px] left-[12px] z-40 flex items-center gap-6 rounded-full bg-white/[85%] p-2 text-black shadow-[0_1px_2px_0_rgb(0,0,0,0.07)] ring-1 ring-gray-900/[11%] backdrop-blur-sm transition hover:bg-gray-100 dark:bg-[#212121]/[85%] dark:text-white dark:shadow-none dark:ring-white/10 dark:hover:bg-[#2e2e2e] sm:top-[38px] sm:left-[33px] md:left-[36px]"
    >
      <ChevronLeftIcon classes="" />
    </a>
    <div class="fixed top-[14px] right-[12px] z-40 flex items-center gap-6 rounded-full bg-white/[85%] p-2 shadow-[0_1px_2px_0_rgb(0,0,0,0.07)] ring-1 ring-gray-900/[11%] backdrop-blur-sm transition hover:bg-gray-100 dark:bg-[#212121]/[85%] dark:text-white dark:shadow-none dark:ring-white/10 dark:hover:bg-[#2e2e2e] sm:top-[38px] sm:right-[32px] md:right-[36px]">
      <ThemeButton classes="p-6" />
    </div>
    {
      image ? (
        <div id="cover" class="relative -mb-6 w-full sm:my-0">
          <img
            src={image}
            alt={title}
            class="max-h-[800px] w-full object-cover object-center dark:brightness-[90%] aspect-[5/3] sm:aspect-[2/1] lg:aspect-[5/2]"
          />
          <span class="absolute bottom-0 left-0 right-0 h-px w-full bg-black/[3%] dark:bg-white/[3%]" />
        </div>
      ) : null
    }
    <div class="flex flex-col gap-12">
      <div class="relative mx-6 grid grid-cols-1 gap-y-6 gap-x-12 border-gray-200 dark:border-[#333333] sm:mx-12 lg:grid-cols-12 lg:border-b lg:pb-12">
        <div class="col-span-full flex justify-between lg:col-span-2">
          <h1 class="-my-1">{title}</h1>
          {
            link ? (
              <a
                href={link}
                target="_blank"
                class="-my-1 -mr-[3px] flex items-center gap-[3px] hover:underline  focus:underline lg:hidden"
              >
                See it
                <ExternalLinkIcon classes="mt-0.5" />
              </a>
            ) : null
          }
        </div>
        {
          tldr.length === 1 ? (
            tldr[0]
          ) : (
            <ul
              role="list"
              class="col-span-full -my-1 flex list-disc flex-col gap-1 pl-5 lg:col-span-4"
            >
              {tldr.map((nugget: string) => (
                <li class="relative block before:absolute before:-left-[22px] before:-top-0.5 before:rounded-full before:text-[24px] before:content-['â€¢']">
                  {nugget}
                </li>
              ))}
            </ul>
          )
        }
        <div class="col-span-full -my-1 flex flex-col lg:col-span-4">
          <Details roles={roles} tools={tools} collaborators={collaborators} />
        </div>
        <div class="flex flex-col justify-between gap-2 lg:col-span-2 lg:items-end">
          {
            link ? (
              <a
                href={link}
                target="_blank"
                class="-my-1 -mr-[3px] hidden items-center gap-[3px] hover:underline focus:underline lg:flex"
              >
                <span class="whitespace-nowrap">See it</span>
                <ExternalLinkIcon classes="mt-0.5" />
              </a>
            ) : null
          }
          <span class="-my-1">{year}</span>
        </div>
      </div>
      <article
        id="content"
        class="overflow-visible relative mx-auto grid min-h-screen grid-cols-1 gap-12 sm:max-w-3xl md:grid-cols-12 lg:mx-0 lg:-mt-1 lg:max-w-none lg:px-12"
      >
        <hr class="absolute top-0 left-1/2 h-px w-screen -translate-x-1/2 transform border-t border-gray-200 dark:border-[#333333] lg:hidden" />
        <div
          class={`
            prose-sm px-6 sm:px-12 lg:px-0 max-w-5xl mx-auto
            prose-headings:col-span-full xl:prose-headings:col-start-2 xl:prose-headings:col-end-8 prose-headings:max-w-prose prose-headings:font-medium prose-headings:text-black dark:prose-headings:text-white prose-headings:m-0 prose-headings:scroll-mt-[72px] sm:prose-headings:scroll-mt-[110px]
            prose-h1:text-[24px] prose-h1:leading-[28px] prose-h1:tracking-[-0.025rem] dark:prose-h1:tracking-[-0.0185rem] prose-h1:mt-[48px] first:prose-h1:mt-0
            prose-h2:text-[14px] prose-h2:-mb-1 prose-h2:leading-5 prose-h2:mt-3
            prose-p:col-span-full xl:prose-p:col-start-2 xl:prose-p:col-end-8 prose-p:max-w-prose prose-p:m-0
            prose-strong:font-medium prose-strong:text-black dark:prose-strong:text-white
            prose-a:underline
            prose-code:bg-gray-100 dark:prose-code:bg-[#2b2b2b] prose-code:rounded prose-code:px-1 prose-code:border prose-code:border-gray-300/[24%] dark:prose-code:border-[#888888]/10 prose-code:py-[2px] prose-code:text-[12px] prose-code:tracking-tight prose-code:leading-6 prose-code:font-mono prose-code:font-normal prose-code:whitespace-nowrap
            prose-ul:list-disc prose-ul:col-span-full xl:prose-ul:col-start-2 xl:prose-ul:col-end-8 prose-ul:max-w-prose prose-ul:pl-5 prose-ul:m-0
            prose-ol:list-decimal prose-ol:col-span-full xl:prose-ol:col-start-2 xl:prose-ol:col-end-8 prose-ol:max-w-prose prose-ol:pl-5 prose-ol:m-0
            prose-li:m-0
            prose-img:col-span-full prose-img:mt-1 prose-img:mb-2
            col-span-full lg:col-start-3 lg:col-span-8 grid grid-cols-1 md:grid-cols-8 gap-y-4 gap-x-12
          `}
        >
          <slot />
        </div>
      </article>
    </div>
  </main>
</Layout>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => entries.forEach((entry) => {
      const id = entry.target.getAttribute("id");
      entry.isIntersecting
        ? document
            .querySelector(`nav li a[href="#${id}"]`)
            ?.parentElement?.classList.add("active")
        : document
            .querySelector(`nav li a[href="#${id}"]`)
            ?.parentElement?.classList.remove("active");
    }), { 
      rootMargin: '-225px' 
    });

    document.querySelectorAll('section[id]').forEach(section => observer.observe(section));
  });

  // Show and hide back button when clikcing on internal links
  const links = Array.from(document.querySelectorAll("a"));
  const internalLinks = links.filter(link => link.getAttribute("href")?.startsWith("#"));

  const goBackUpButton: HTMLButtonElement = document.querySelector("#go-back-up-button") as HTMLButtonElement;
  const goBackDownButton = document.querySelector("#go-back-down-button") as HTMLButtonElement;

  const isElementInView = (element: HTMLElement) => {
    const rect = element.getBoundingClientRect();
    const viewportWidth =
      window.innerWidth || document.documentElement.clientWidth;
    const viewportHeight =
      window.innerHeight || document.documentElement.clientHeight;

    const isInView =
      rect.right >= 0 &&
      rect.bottom >= 0 &&
      rect.left <= viewportWidth &&
      rect.top <= viewportHeight;

    return isInView;
  };

  const goBack = () => window.history.back();
  const showBackButton = (button: HTMLButtonElement) =>
    button.classList.remove("-translate-y-[49px]", "sm:-translate-y-[88px]");
  const hideBackButton = (button: HTMLButtonElement) =>
    button.classList.add("-translate-y-[49px]", "sm:-translate-y-[88px]");

  const showAndHideBackButton = (e: Event) => {
    debugger;

    hideBackButton(goBackUpButton);
    hideBackButton(goBackDownButton);

    const clickedLink = e.target as HTMLAnchorElement;

    setTimeout(() => {
      if (isElementInView(clickedLink)) return;

      const backButton =
        window.scrollY > clickedLink.offsetTop
          ? goBackUpButton
          : goBackDownButton;
      showBackButton(backButton);
      setTimeout(() => hideBackButton(backButton), 8000);
    }, 550);
  };

  internalLinks.forEach((internalLink) => {
    internalLink.addEventListener("click", (e) => showAndHideBackButton(e));
  });

  goBackUpButton.addEventListener("click", () => {
    goBack();
    hideBackButton(goBackUpButton);
  });

  goBackDownButton.addEventListener("click", () => {
    goBack();
    hideBackButton(goBackDownButton);
  });
</script>

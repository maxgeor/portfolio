---
import Header from '../components/Header.astro';
import SkipLink from '../components/SkipLink.astro';
import MusicNote from '../components/icons/MusicNote.astro';
import SpeedInsights from "@vercel/speed-insights/astro"

export interface Props {
  title?: string;
  description?: string;
  offset?: string;
  smoothScroll?: boolean;
  mainContentId?: string;
  classes?: string;
}

const {
  title = "Max Georgopoulos",
  description,
  offset = 'pt-[50px]',
  smoothScroll = true,
  mainContentId,
  classes = '',
} = Astro.props;

const DEFAULT_THEME = 'light';

const criticalCSS = `
  :root {
    --background-color: #fff;
    --text-color: #000;
    --highlight-color: #eaeaea;
  }
  :root.dark {
    --background-color: #000;
    --text-color: #fff;
    --highlight-color: #323232;
  }
  body {
    background-color: var(--background-color);
    color: var(--text-color);
  }
`;

const inlineScript = `
  (function() {
    function getTheme() {
      return localStorage.getItem('theme') || '${DEFAULT_THEME}';
    }
    var theme = getTheme();
    document.documentElement.classList.toggle('dark', theme === 'dark');
    window.localStorage.setItem('theme', theme);

    // Disable transitions on load
    document.documentElement.classList.add('no-transitions');

    function isMobileOrTablet() {
      const userAgent = navigator.userAgent.toLowerCase();
      const mobileKeywords = [
        'android', 'webos', 'iphone', 'ipod', 'blackberry', 'windows phone'
      ];
      
      const isMobile = mobileKeywords.some(keyword => userAgent.includes(keyword));
      
      const isTablet = /tablet|ipad|playbook|silk|(android(?!.*mobile))/i.test(userAgent);
      
      const isIpadOS = navigator.maxTouchPoints && 
                      navigator.maxTouchPoints > 2 && 
                      /MacIntel/.test(navigator.platform);

      return isMobile || isTablet || isIpadOS;
    }

    function applyDeviceSpecificStyles() {
      if (isMobileOrTablet()) {
        document.body.classList.add('mobile-or-tablet');
      } else {
        document.body.classList.add('desktop');
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      applyDeviceSpecificStyles();
      // Enable transitions after a short delay
      setTimeout(() => {
        document.documentElement.classList.remove('no-transitions');
      }, 50);
    });
  })();
`;
---

<!DOCTYPE html>
<html lang="en" class={smoothScroll ? 'scroll-smooth' : ''}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description || "Designer & developer"} />
    <style set:html={criticalCSS}></style>
    <script set:html={inlineScript}></script>
  </head>
  <body
    style="text-rendering: optimizeLegibility;"
    class={`grid grid-cols-12 relative min-h-screen text-[12px] leading-[16px] p-2 gap-x-4 gap-y-8 ${offset} ${classes}`}
  >
    {mainContentId && <SkipLink anchor={mainContentId} />}
    <Header />
    <slot />
    <div class="hidden">
      <SpeedInsights />
    </div>
  </body>
</html>

<style is:global>  
  .no-transitions *, .no-transitions *::before, .no-transitions *::after {
    transition: none !important;
  }

  @font-face {
    font-family: "Berkeley Mono";
    src: url(/fonts/BerkeleyMono-Regular.ttf);
  }

  :root {
    --nav-width: 75px;  
    --nav-offset: calc(var(--nav-width) + (15px * 2));
    --aside-width: calc((100vw - var(--nav-width) - 15px) / 4);
    --accent-color: #23FF27;
    --accent-text-color: #000;
  }

  ::selection {
    background-color: var(--accent-color);
    color: var(--accent-text-color);
  }

  ::-moz-selection {
    background-color: var(--accent-color);
    color: var(--accent-text-color);
  }

  html {
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
  }
  
  a {
    text-underline-offset: 2px;
  }

  a:focus-visible, button:focus-visible, summary:focus-visible {
    outline: solid 2px var(--accent-color);
    outline-offset: 1px;
    text-decoration: none;
  }
  
  .desktop a:hover, .desktop button:hover, .desktop summary:hover {
    opacity: 0.5;
    text-decoration: none;
  }
  
  .desktop a:focus-visible, .desktop button:focus-visible, .desktop summary:focus-visible {
    opacity: 1;
  }

  button {
    text-align: left;
  }

  tr:last-child > td {
    padding-bottom: 0;
  }

  td {
    vertical-align: top;
  }

  del {
    text-decoration-thickness: 0.08em;
  }

  .text-balance {
    text-wrap: balance;
  }
</style>

<!-- <script>
  const musicToggle = document.getElementById('music-toggle') as HTMLButtonElement;
  const musicToggleLineThrough = document.getElementById('music-toggle-line-through') as HTMLSpanElement;
  let audio = new Audio();
  let isPlaying = false;
  let currentSongIndex = 0;

  const songs = [
    '/songs/magnolia.wav',
    '/songs/typeshit.wav',
    '/songs/miley.wav',
  ];

  function playNextSong() {
    currentSongIndex = (currentSongIndex + 1) % songs.length;
    audio.src = songs[currentSongIndex];
    audio.play();
  }

  audio.addEventListener('ended', playNextSong);

  musicToggle.addEventListener('click', () => {
    if (isPlaying) {
      audio.pause();
      musicToggleLineThrough.classList.add('hidden');
    } else {
      if (audio.src === '') {
        audio.src = songs[currentSongIndex];
      }
      audio.play();
      musicToggleLineThrough.classList.remove('hidden');
    }
    isPlaying = !isPlaying;
  });
</script> -->
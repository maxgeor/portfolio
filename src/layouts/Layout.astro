---
import ThemeToggle from '../components/ThemeToggle.astro';
import { getCollection } from 'astro:content';
import clsx from 'clsx';

export interface Props {
  title?: string;
  description?: string;
  offset?: string;
  classes?: string;
}
const {
  title = "Max Georgopoulos",
  description,
  offset = 'pt-[50px]',
  classes = '',
} = Astro.props;

const currentPath = Astro.url.pathname;

const work = await getCollection('work', ({ data: { isDraft } }) => !isDraft);
const writing = await getCollection('writing', ({ data: { isDraft } }) => !isDraft);

const workCount = work.length;
const writingCount = writing.length;
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description || "Designer & developer"} />
  </head>
  <body
    style="text-rendering: optimizeLegibility;"
    class={clsx(
      "grid grid-cols-12 relative bg-white dark:bg-black dark:text-white text-black min-h-screen text-[12px] leading-[16px] selection:bg-[var(--highlight-color)] p-2 gap-x-4 gap-y-8",
      offset,
      classes
    )}
  >
    <header class=" grid grid-cols-12 col-span-full gap-4 uppercase fixed top-1.5 left-2 right-2 z-50">
      <a href="/" class="col-span-6 md:col-span-4 whitespace-nowrap uppercase p-2 -m-2 w-fit">
        <span class="hidden sm:inline">Max Kevin Crapper Georgopoulos</span>
        <span class="sm:hidden">Max KC Georgopoulos</span>
      </a>
      <a href="/" class={`whitespace-nowrap hidden md:block col-span-1 p-2 -m-2`}>Work <sup>{workCount}</sup></a>
      <a href="/about" class={`whitespace-nowrap hidden md:block col-span-1 p-2 -m-2`}>About</a>
      <a href="/writing" class={`whitespace-nowrap hidden md:block col-span-1 p-2 -m-2`}>Writing <sup>{writingCount}</sup></a>
      <a href="/contact" class={`whitespace-nowrap hidden md:block col-span-1 p-2 -m-2`}>Contact</a>
      <ThemeToggle classes='md:col-start-11 col-span-2 w-fit' />
      <button id="menu-toggle" class="justify-self-end w-fit md:hidden uppercase text-right col-start-11 col-span-2 p-2 -m-2">Menu</button>
    </header>
    <div id="full-screen-menu" class="fixed inset-0 bg-white dark:bg-black z-40 hidden md:hidden flex-col  p-2 overflow-hidden">
      <nav class="border-black dark:border-white divide-black dark:divide-white border-y-[0.5px] divide-y-[0.5px] text-[34px] leading-[32px] flex flex-col mt-[42px] uppercase font-bold [&>*]:-my-0.5 [&>*]:py-4 [&>*]:px-2 -mx-2">
        <a href="/" class={currentPath === '/' ? '' : ''}>Work<sup>{workCount}</sup></a>
        <a href="/about" class={currentPath === '/about' ? '' : ''}>About</a>
        <a href="/writing" class={currentPath === '/writing' ? '' : ''}>Writing<sup>{writingCount}</sup></a>
        <a href="/contact" class={currentPath === '/contact' ? '' : ''}>Contact</a>
      </nav>
    </div>
    <slot />
  </body>
</html>

<style is:global> 
  @font-face {
    font-family: "Bookish";
    src: url(/fonts/bookish-off-white-regular.woff2);
  }

  @font-face {
    font-family: "Berkeley Mono";
    src: url(/fonts/BerkeleyMono-Regular.ttf);
  }

  :root {
    --nav-width: 75px;  
    --nav-offset: calc(var(--nav-width) + (15px * 2));
    --aside-width: calc((100vw - var(--nav-width) - 15px) / 4);
    --background-color: #fff;
    --highlight-color: #eaeaea;
    --accent-color: #23FF27;
  }

  ::-moz-selection { 
    background-color: var(--highlight-color);
  }

  ::selection {
    background-color: var(--highlight-color);
  }

  html {
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
  }

  html.dark {
    --background-color: #000;
    --highlight-color: #323232;
  }

  a {
    text-underline-offset: 2px;
  }

  a:focus-visible, button:focus-visible, summary:focus-visible {
    outline: solid 2px var(--accent-color);
    outline-offset: 1px;
    text-decoration: none;
  }
  
  @media (min-width: 1024px) {
    a:hover, button:hover, summary:hover {
      opacity: 0.5;
      text-decoration: none;
    }
  }

  button {
    text-align: left;
  }

  tr:last-child > td {
    padding-bottom: 0;
  }

  td {
    vertical-align: top;
  }

  del {
    text-decoration-thickness: 0.08em;
  }

  .light-border::after {
    box-shadow: inset 0 0 0 1px RGBA(255,255,255,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .dark-border::after {
    box-shadow: inset 0 0 0 1px RGBA(0,0,0,0.09);
    content: '';
    display: block;
    height: 100%;
    position: absolute;
    top: 0;
    width: 100%;
  }

  .text-balance {
    text-wrap: balance;
  }
</style>

<script >
  // Immediately set the theme to prevent flash
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }

  document.querySelector('meta[name="theme-color"]')?.remove();

  window.localStorage.setItem('theme', theme || 'dark');

  document.addEventListener('DOMContentLoaded', (event) => {
    const menuToggle = document.getElementById('menu-toggle');
    const fullScreenMenu = document.getElementById('full-screen-menu');

    if (menuToggle && fullScreenMenu) {
      menuToggle.addEventListener('click', () => {
        if (fullScreenMenu.classList.contains('hidden')) {
          fullScreenMenu.classList.remove('hidden');
          fullScreenMenu.classList.add('flex');
          menuToggle.textContent = 'Close';
        } else {
          fullScreenMenu.classList.add('hidden');
          fullScreenMenu.classList.remove('flex');
          menuToggle.textContent = 'Menu';
        }
      });
    }
  });
</script>

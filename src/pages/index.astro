---
import Layout from "../layouts/Layout.astro";
import Work from "../components/Work.astro";
import { getCollection } from 'astro:content';

const workData = await getCollection('work', ({ data: { isDraft } }) => !isDraft);

const orderedWork = () => workData.sort((a, b) => (a.data.order - b.data.order));

const typeCounts = {
  client: workData.filter(work => work.data.type === 'client').length,
  project: workData.filter(work => work.data.type === 'project').length
};

const roleCounts = {
  Product: workData.filter(work => work.data.roles.includes('Product')).length,
  Brand: workData.filter(work => work.data.roles.includes('Brand')).length,
  Code: workData.filter(work => work.data.roles.includes('Code')).length
};

const caseStudyCount = workData.filter(work => work.data.studySlug).length;
---

<Layout offset="pt-[114px] xs:pt-[94px]" smoothScroll={false}>
  <nav class="flex flex-col xs:grid grid-cols-12 col-span-full gap-y-2 md:gap-y-4 gap-x-4 uppercase flex-wrap fixed left-2 right-2 top-[50px] mb-[62px] z-10">
    <div class="order-2 xs:order-none grid grid-cols-3 xs:flex gap-x-4 xs:gap-x-2 col-span-6 md:col-span-4 xl:col-span-3 -my-0.5">
      <button class="filter-btn uppercase whitespace-nowrap h-min xs:py-2 xs:-my-2" data-filter="role" data-value="Product"><span>Product</span> <sup>{roleCounts.Product}</sup></button>
      <button class="filter-btn uppercase whitespace-nowrap h-min xs:py-2 xs:-my-2" data-filter="role" data-value="Brand"><span>Brand</span> <sup>{roleCounts.Brand}</sup></button>
      <button class="filter-btn uppercase whitespace-nowrap h-min xs:py-2 xs:-my-2" data-filter="role" data-value="Code"><span>Code</span> <sup>{roleCounts.Code}</sup></button>
    </div>
    <div class="order-1 xs:order-none grid grid-cols-3 xs:flex gap-x-4 xs:gap-x-2 col-span-6 md:col-span-4 xl:col-span-3 -my-0.5">
      <button class="filter-btn uppercase whitespace-nowrap h-min xs:py-2 xs:-my-2" data-filter="type" data-value="project"><span>Project</span> <sup>{typeCounts.project}</sup></button>
      <button class="filter-btn uppercase whitespace-nowrap h-min xs:py-2 xs:-my-2" data-filter="type" data-value="client"><span>Client</span> <sup>{typeCounts.client}</sup></button>
      <button class="filter-btn uppercase whitespace-nowrap md:hidden h-min xs:py-2 xs:-my-2" data-filter="caseStudy"><span>Case Study</span> <sup>{caseStudyCount}</sup></button>
    </div>
    <div class="hidden md:flex col-span-3 -my-0.5 ">
      <button class="filter-btn uppercase col-span-1 h-min xs:py-2 xs:-my-2" data-filter="caseStudy"><span>Case Study</span> <sup>{caseStudyCount}</sup></button>
    </div>
    <div class="order-last flex md:justify-end xl:justify-start opacity-0 pointer-events-none transition-opacity col-span-6 md:col-span-1 xl:col-span-2  lg:col-start-12 -my-0.5 h-min">
      <button id="clear-filters-btn" class="whitespace-nowrap uppercase h-min xs:py-2 xs:-my-2">Clear</button>
    </div>
  </nav>
  <div id="work-container" class="work-container grid grid-cols-12 col-span-full gap-y-8 gap-x-4 h-fit">
    {orderedWork().map(({ data: work }) => (
      <Work 
        {...work}
        attributes={{
          'data-type': work.type,
          'data-roles': work.roles.join(','),
          'data-case-study': work.studySlug ? 'true' : null
        }}
      />
    ))}
  </div>
</Layout>

<style>
  .filter-btn.active > span {
    text-decoration: line-through;
  }
</style>

<script>
  const workContainer = document.getElementById('work-container');
  const filterButtons = document.querySelectorAll('.filter-btn');
  const clearFiltersButton = document.getElementById('clear-filters-btn');
  const works = workContainer ? [...workContainer.children] as HTMLElement[] : [];

  type FilterType = 'type' | 'role' | 'caseStudy';
  type ActiveFilters = {
    type: string[];
    role: string[];
    caseStudy: boolean;
  };

  let activeFilters: ActiveFilters = { type: [], role: [], caseStudy: false };

  function isMobileOrTablet() {
    let check = false;
    (function (a) { if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || (window as any).opera);
    return check;
  }

  const isMobileOrTabletDevice = isMobileOrTablet();

  const hasActiveFilters = () => (
    activeFilters.type.length > 0 || 
    activeFilters.role.length > 0 || 
    activeFilters.caseStudy
  );

  function updateWorks() {
    if (!hasActiveFilters()) {
      showAllWorks();
    } else {
      works.forEach(work => {
        const type = work.getAttribute('data-type') || '';
        const roles = work.getAttribute('data-roles')?.split(',') || [];
        const hasCaseStudy = work.getAttribute('data-case-study') === 'true';

        const typeMatch = activeFilters.type.length === 0 || activeFilters.type.includes(type);
        const roleMatch = activeFilters.role.length === 0 || activeFilters.role.some(role => roles.includes(role));
        const caseStudyMatch = !activeFilters.caseStudy || hasCaseStudy;
        
        if (typeMatch && roleMatch && caseStudyMatch) {
          work.style.display = '';
          if (isMobileOrTabletDevice) {
            work.classList.add('active');
          }
        } else {
          work.style.display = 'none';
          work.classList.remove('active');
        }
      });
      
      window.scrollTo(0, 0);
    }
    updateClearFiltersButton();
  }

  function showAllWorks() {
    works.forEach((work, index) => {
      work.style.display = '';
      work.style.transition = `opacity 0.3s ease ${index * 0.1}s`;
      work.style.opacity = '0';
      setTimeout(() => {
        work.style.opacity = '1';
      }, 50);
      if (isMobileOrTabletDevice) {
        work.classList.add('active');
      } else {
        work.classList.remove('transition-opacity', 'transition', 'transition-all');
        work.classList.remove('active');
      }
    });
  }

  function updateClearFiltersButton() {
    const clearFiltersButtonParent = clearFiltersButton?.parentElement;
    if (hasActiveFilters()) {
      clearFiltersButtonParent?.classList.remove('opacity-0', 'pointer-events-none');
      clearFiltersButtonParent?.classList.add('opacity-100');
    } else {
      clearFiltersButtonParent?.classList.add('opacity-0', 'pointer-events-none');
      clearFiltersButtonParent?.classList.remove('opacity-100');
    }
  }

  function clearFilters() {
    activeFilters = { type: [], role: [], caseStudy: false };
    filterButtons.forEach(button => button.classList.remove('active'));
    showAllWorks();
    updateClearFiltersButton();
  }

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter') as FilterType;
      const value = button.getAttribute('data-value');

      if (filter === 'caseStudy') {
        activeFilters.caseStudy = !activeFilters.caseStudy;
      } else if (filter && value) {
        const filterArray = activeFilters[filter];
        const index = filterArray.indexOf(value);
        if (index > -1) {
          filterArray.splice(index, 1);
        } else {
          filterArray.push(value);
        }
      }

      button.classList.toggle('active');
      updateWorks();
    });
  });

  clearFiltersButton?.addEventListener('click', clearFilters);

  updateClearFiltersButton();

  if (!isMobileOrTabletDevice) {
    works.forEach(work => {
      let timer;

      work.addEventListener('mouseenter', () => {
        work.classList.add('active');

        clearTimeout(timer);
        timer = setTimeout(() => {
          work.classList.remove('active');
        }, 4400);
      });
    });
  }

  showAllWorks();

  window.addEventListener('orientationchange', showAllWorks);
</script>